<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://callmarx.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://callmarx.github.io/" rel="alternate" type="text/html" /><updated>2022-06-29T21:42:53-03:00</updated><id>https://callmarx.github.io/feed.xml</id><title type="html">CallMarx</title><author><name>Eugenio Augusto Jimenes</name></author><entry><title type="html">Tutorial: Rails7, Tailwind e Hotwire - Parte 3</title><link href="https://callmarx.github.io/blog/2022/06/29/tutorial-rails7-hotwire-parte-3.html" rel="alternate" type="text/html" title="Tutorial: Rails7, Tailwind e Hotwire - Parte 3" /><published>2022-06-29T21:34:03-03:00</published><updated>2022-06-29T21:34:03-03:00</updated><id>https://callmarx.github.io/blog/2022/06/29/tutorial-rails7-hotwire-parte-3</id><content type="html" xml:base="https://callmarx.github.io/blog/2022/06/29/tutorial-rails7-hotwire-parte-3.html"><![CDATA[<p><img src="/assets/posts/stimulus-logo.webp" alt="Hotwire Stimulus Logo" class="align-center" /></p>

<p>Na <a href="/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html" target="_blank">parte anterior</a>
deste tutorial eu expliquei como utilizar a renderização parcial de html com <code class="language-plaintext highlighter-rouge">turbo_stream</code> do
<a href="https://turbo.hotwired.dev" target="_blank">Hotwire Turbo</a>, o que nos permitiu mostrar os cards
recém inseridos ou excluídos do nosso humilde protótipo de Kanban. Agora vou abordar sobre
o pacote <a href="https://stimulus.hotwired.dev/" target="_blank">Hotwire Stimulus</a>.
<!-- excerpt-separator --></p>

<h2 id="objetivo-geral">Objetivo Geral</h2>
<p>A meta é desenvolver (e aprender) utilizando Rails 7, esbuild, Tailwind e Hotwire (Turbo e
Stimulus), mas meu foco será mais sobre o pacote Hotwire e como ele pode nos ajudar. Conforme
avanço nos estudos e na implementação, vou complementando este tutorial. Por enquanto temos:</p>
<ul>
  <li><a href="/blog/2021/12/07/tutorial-rails7-hotwire.html" target="_blank">Parte 0: Rails 7</a></li>
  <li><a href="/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html" target="_blank">Parte 1: Tailwind</a></li>
  <li><a href="/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html" target="_blank">Parte 2: Hotwire Turbo</a></li>
  <li><a href="#etapa-3---hotwire-stimulus">Parte 3: Hotwire Stimulus</a> → página atual</li>
</ul>

<p>O pano de fundo é uma aplicação estilo Kanban, com um quadro em que podemos incluir, ver, editar e
excluir os cards/tarefas e isso ser persistido simultaneamente via <em>websockets</em> para todas as
sessões abertas da aplicação. Todo código está disponível neste
<a href="https://github.com/callmarx/LearningHotwire" target="_blank">repositório</a>. Note que incluí
algumas <a href="https://github.com/callmarx/LearningHotwire/branches/all" target="_blank"><em>branches</em></a> que
representam as partes abordadas aqui.</p>

<h2 id="etapa-3---hotwire-stimulus">Etapa 3 - Hotwire Stimulus</h2>
<p>Nesta etapa final, implementei um <em>modal</em> (o famoso pop-up que não é exatamente um pop-up) do qual
será controlado por JS através do Hotwire Stimulus. Dividi essa etapa em 3 <em>branches</em>:</p>
<ul>
  <li><a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1" target="_blank">blog-part-3.1</a> -
Em que uso a Turbo Frame e o Stimulus para renderizar um html dinamicamente e depois remove-lo;</li>
  <li><a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2" target="_blank">blog-part-3.2</a> -
Em que uso um pouco mais de Tailwind para fazer o <em>modal</em> e o Stimulus para lidar com outras ações necessárias;</li>
  <li><a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3" target="_blank">blog-part-3.4</a> -
Subparte bônus, em que uso a gema <a href="https://viewcomponent.org/" target="_blank">ViewComponent</a>
para agrupar melhor o código do <em>modal</em>.</li>
</ul>

<h3 id="foi-só-falar-que-eu-não-ia-usar-turbo-frame-que">Foi só falar que eu não ia usar Turbo Frame que…</h3>
<p>Na etapa anterior, na parte que faço uma breve explicação sobre a diferença entre
<a href="/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html#turbo-frame-vs-turbo-stream" target="_blank">turbo-frame e turbo-stream</a>,
coloquei uma observação dizendo que não pretendia utilizar o Turbo Frame e eis que surge a
oportunidade: com ele podemos renderizar dinamicamente o formulário do <em>chore</em> para o usuário,
quando ele precisar inserir ou editar.</p>

<p>Primeiro, inclui a linha <code class="language-plaintext highlighter-rouge">&lt;%= turbo_frame_tag "modal" %&gt;</code> no arquivo
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/views/layouts/application.html.erb" target="_blank">app/views/layouts/application.html.erb</a>,
resultando no seguinte:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/layouts/application.html.erb of blog-part-3.1 branch --&gt;</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>LearningHotwire<span class="nt">&lt;/title&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">csp_meta_tag</span> <span class="cp">%&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">"application"</span><span class="p">,</span> <span class="s2">"data-turbo-track"</span><span class="p">:</span> <span class="s2">"reload"</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">"application"</span><span class="p">,</span> <span class="s2">"data-turbo-track"</span><span class="p">:</span> <span class="s2">"reload"</span><span class="p">,</span> <span class="ss">defer: </span><span class="kp">true</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="cp">%&gt;</span> <span class="c">&lt;!-- add this --&gt;</span>
    <span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Depois envolvi o conteúdo de
<a href="https://github.com/callmarx/LearningHotwire/blob/46e4871993ac592a990d7d0e3a4e7c29d0e69626/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
pelo <em>block</em> de <code class="language-plaintext highlighter-rouge">&lt;%= turbo_frame_tag "modal" do %&gt;...&lt;% end %&gt;</code>, mas que no caso ficou apenas para
dar o <em>render</em> do <em>partial form</em>, ou seja:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>E então, alterei o link de inserir um novo <em>chore</em> adicionando a opção
<code class="language-plaintext highlighter-rouge">data: { turbo_frame: 'modal' }</code> em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/views/chores/index.html.erb" target="_blank">app/views/chores/index.html.erb</a>,
também incluí um ícone para o botão e removi o <code class="language-plaintext highlighter-rouge">render</code> do <code class="language-plaintext highlighter-rouge">form</code> que tinha no final:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/index.html.erb of blog-part-3.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream_from</span> <span class="s2">"chores"</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"z-0 flex flex-col h-screen bg-slate-300"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-end py-2"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">new_chore_path</span><span class="p">,</span>
      <span class="ss">data: </span><span class="p">{</span> <span class="ss">turbo_frame: </span><span class="s1">'modal'</span> <span class="p">},</span> <span class="c1"># required for turbo frame</span>
      <span class="k">class</span><span class="ss">:"flex m-1 mr-12 p-2 w-fit h-fit text-white bg-slate-600 hover:bg-slate-900 rounded-md"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;svg</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">width=</span><span class="s">"24"</span> <span class="na">height=</span><span class="s">"24"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M8 0c-.176 0-.35.006-.523.017l.064.998a7.117 7.117 0 0 1 .918 0l.064-.998A8.113 8.113 0 0 0 8 0zM6.44.152c-.346.069-.684.16-1.012.27l.321.948c.287-.098.582-.177.884-.237L6.44.153zm4.132.271a7.946 7.946 0 0 0-1.011-.27l-.194.98c.302.06.597.14.884.237l.321-.947zm1.873.925a8 8 0 0 0-.906-.524l-.443.896c.275.136.54.29.793.459l.556-.831zM4.46.824c-.314.155-.616.33-.905.524l.556.83a7.07 7.07 0 0 1 .793-.458L4.46.824zM2.725 1.985c-.262.23-.51.478-.74.74l.752.66c.202-.23.418-.446.648-.648l-.66-.752zm11.29.74a8.058 8.058 0 0 0-.74-.74l-.66.752c.23.202.447.418.648.648l.752-.66zm1.161 1.735a7.98 7.98 0 0 0-.524-.905l-.83.556c.169.253.322.518.458.793l.896-.443zM1.348 3.555c-.194.289-.37.591-.524.906l.896.443c.136-.275.29-.54.459-.793l-.831-.556zM.423 5.428a7.945 7.945 0 0 0-.27 1.011l.98.194c.06-.302.14-.597.237-.884l-.947-.321zM15.848 6.44a7.943 7.943 0 0 0-.27-1.012l-.948.321c.098.287.177.582.237.884l.98-.194zM.017 7.477a8.113 8.113 0 0 0 0 1.046l.998-.064a7.117 7.117 0 0 1 0-.918l-.998-.064zM16 8a8.1 8.1 0 0 0-.017-.523l-.998.064a7.11 7.11 0 0 1 0 .918l.998.064A8.1 8.1 0 0 0 16 8zM.152 9.56c.069.346.16.684.27 1.012l.948-.321a6.944 6.944 0 0 1-.237-.884l-.98.194zm15.425 1.012c.112-.328.202-.666.27-1.011l-.98-.194c-.06.302-.14.597-.237.884l.947.321zM.824 11.54a8 8 0 0 0 .524.905l.83-.556a6.999 6.999 0 0 1-.458-.793l-.896.443zm13.828.905c.194-.289.37-.591.524-.906l-.896-.443c-.136.275-.29.54-.459.793l.831.556zm-12.667.83c.23.262.478.51.74.74l.66-.752a7.047 7.047 0 0 1-.648-.648l-.752.66zm11.29.74c.262-.23.51-.478.74-.74l-.752-.66c-.201.23-.418.447-.648.648l.66.752zm-1.735 1.161c.314-.155.616-.33.905-.524l-.556-.83a7.07 7.07 0 0 1-.793.458l.443.896zm-7.985-.524c.289.194.591.37.906.524l.443-.896a6.998 6.998 0 0 1-.793-.459l-.556.831zm1.873.925c.328.112.666.202 1.011.27l.194-.98a6.953 6.953 0 0 1-.884-.237l-.321.947zm4.132.271a7.944 7.944 0 0 0 1.012-.27l-.321-.948a6.954 6.954 0 0 1-.884.237l.194.98zm-2.083.135a8.1 8.1 0 0 0 1.046 0l-.064-.998a7.11 7.11 0 0 1-.918 0l-.064.998zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/svg&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"ml-2 font-semibold"</span><span class="nt">&gt;</span>New Chore<span class="nt">&lt;/span&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"z-0 w-4/5 mx-auto overflow-hidden h-4/5 bg-slate-200 rounded-md transition transform duration-600 ease-in-out hover:bg-slate-400 hover:overflow-visible"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chores"</span> <span class="na">class=</span><span class="s">"z-0 px-5 pt-1 pb-3 grid grid-cols-3 gap-2"</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%</span> <span class="vi">@chores</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">chore</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"chore"</span><span class="p">,</span> <span class="n">chore</span><span class="ss">:chore</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span> <span class="c">&lt;!-- remove 'render "form"' --&gt;</span>
</code></pre></div></div>
<p>com isso, quando você clicar no butão <em>New Chore</em>, será incluído
<code class="language-plaintext highlighter-rouge">src="http://localhost:3000/chores/new"</code> na área reservado com <code class="language-plaintext highlighter-rouge">&lt;%= turbo_frame_tag "modal" %&gt;</code> que
agora está no arquivo
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/views/layouts/application.html.erb" target="_blank">app/views/layouts/application.html.erb</a>
e com isso
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>
será renderizado dinamicamente dentro desta tag.
<img src="/assets/posts/gifs/triggering-turbo-frame.gif" alt="Triggering Turbo Frame" class="align-center" /></p>

<p>Note que uma vez clicado em “New Chore”, não é possível remover o formulário, seja com um botão de
fechar ou mesmo após a inserção de um novo card. Para isso utilizaremos o Stimulus como mostrarei
nos próximos passos.</p>

<p class="notice--info"><strong>OBS</strong>: Eu coloquei <code class="language-plaintext highlighter-rouge">&lt;%= turbo_frame_tag "modal" %&gt;</code> em “app/views/layouts/application.html.erb”
porque eu espero poder renderizar o <em>modal</em> de inserção em qualquer página da minha aplicação. Como
se trata de Kanban, o usuário provavelmente gostaria de inserir um novo card em qualquer página,
mas isso poderia ser feito, por exemplo, apenas quando estamos vendo todos os cards, ou seja, em
“app/views/chores/index.html.erb”.</p>

<h3 id="primeiros-passados-com-stimulus">Primeiros passados com Stimulus</h3>
<p>Primeiro gerei um “novo stimulus” no projeto, com seguinte comando e saída:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate stimulus chore-modal
       create  app/javascript/controllers/chore_modal_controller.js
       rails  stimulus:manifest:update
</code></pre></div></div>

<p>Como observado antes, não estamos “removendo” o html inserido dinamicamente pelo turbo-frame,
então vamos fazer isso como nosso primeiro método de <code class="language-plaintext highlighter-rouge">ChoreModalController</code>, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/javascript/controllers/chore_modal_controller.js" target="_blank">app/javascript/controllers/chore_modal_controller.js</a>:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file app/javascript/controllers/chore_modal_controller.js of blog-part-3.1 branch</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Controller</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@hotwired/stimulus</span><span class="dl">"</span>

<span class="c1">// Connects to data-controller="chore-modal"</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
  <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hi! we are in ChoreModalController from Stimulus</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="c1">// action: "chore-modal#hideModal"</span>
  <span class="nx">hideModal</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">You've just called ChoreModalController#hideModal</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Para fechar o formulário de inserção, eu simplesmente removo o atributo <code class="language-plaintext highlighter-rouge">src</code> do elemento pai, que
no caso precisará ser o da tag <code class="language-plaintext highlighter-rouge">&lt;turbo-frame ...&gt;&lt;/turbo-frame&gt;</code> e depois o próprio elemento em que
<code class="language-plaintext highlighter-rouge">ChoreModalController</code> for chamado, que no caso será na <em>view</em> de inserção. Note também que incluí
alguns <code class="language-plaintext highlighter-rouge">console.log()</code> para mostrar quando estamos passando por cada parte de
<code class="language-plaintext highlighter-rouge">ChoreModalController</code>.</p>

<p>Agora precisamos dizer em que parte do nosso html iremos chamá-lo, para isso basta envolver sob
alguma <code class="language-plaintext highlighter-rouge">div</code> com <code class="language-plaintext highlighter-rouge">data-controller="chore-modal"</code>. Também é necessário dizer onde estará a ação que
invocará <code class="language-plaintext highlighter-rouge">ChoreModalController#hideModal</code> e isso é feito com <code class="language-plaintext highlighter-rouge">data-action="chore-modal#hideModal"</code>.
Sendo assim,
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>
ficou:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">controller: </span><span class="s2">"chore-modal"</span> <span class="p">}</span> <span class="k">do</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">button_tag</span> <span class="s2">"Close"</span><span class="p">,</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">action: </span><span class="s2">"chore-modal#hideModal"</span> <span class="p">},</span> <span class="ss">type: </span><span class="s2">"button"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"fixed top-0 right-0 rounded-lg p-3 m-2 bg-red-700 text-white"</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>
<p>A ação onde apliquei <code class="language-plaintext highlighter-rouge">data-action="chore-modal#hideModal"</code> foi em um botão vermelho com “Close”.
No caso, o erb <code class="language-plaintext highlighter-rouge">&lt;%= button_tag ... %&gt;</code> irá resultar no seguinte html:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span>
  <span class="na">name=</span><span class="s">"button"</span>
  <span class="na">type=</span><span class="s">"button"</span>
  <span class="na">data-action=</span><span class="s">"chore-modal#hideModal"</span>
  <span class="na">class=</span><span class="s">"fixed right-0 rounded-lg p-3 m-2 bg-red-700 text-white"</span><span class="nt">&gt;</span>Close<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>
<p>e como <code class="language-plaintext highlighter-rouge">&lt;%= tag.div data: { controller: "chore-modal" } do %&gt;</code> está dentro de
<code class="language-plaintext highlighter-rouge">&lt;%= turbo_frame_tag "modal" do %&gt;</code>, <code class="language-plaintext highlighter-rouge">ChoreModalController#hideModal</code> irá remover o atributo <code class="language-plaintext highlighter-rouge">src</code>
da tag <code class="language-plaintext highlighter-rouge">&lt;turbo-frame id="modal" ...&gt;&lt;/turbo-frame&gt;</code> e o conteúdo dentro dela.</p>

<p>O resultado esperado é o seguinte:
<img src="/assets/posts/gifs/removing-turbo-frame.gif" alt="Removing rendered Turbo Frame with Stimulus" class="align-center" /></p>

<p>E na aba “Console” podemos ver os <code class="language-plaintext highlighter-rouge">Console.log()</code> que coloquei:
<img src="/assets/posts/gifs/removing-turbo-frame-console.gif" alt="Removing rendered Turbo Frame with Stimulus - Console" class="align-center" /></p>

<p>Tudo o que foi feito até aqui é o que corresponde a <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.1">blog-part-3.1</a>.</p>

<h3 id="mas-e-o-modal">Mas e o modal?</h3>
<p>Bem, o formulário de inserção por enquanto é incluído no topo da página movendo todo resto para
baixo. Definitivamente não é um <em>modal</em> <del>e nada bonito ou agradável</del>. Para isso basta utilizarmos o
Tailwind.</p>

<p>Em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.2 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span>
      <span class="ss">controller: </span><span class="s2">"chore-modal"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="c1"># add the following classes</span>
    <span class="ss">class: </span><span class="s2">"z-40 fixed flex justify-center inset-0 bg-gray-600 bg-opacity-50 h-screen w-screen"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col p-4 m-12 rounded-md w-2/3 h-2/3 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="c">&lt;!-- replace button to a better one --&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">button_tag</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">action: </span><span class="s2">"chore-modal#hideModal"</span> <span class="p">},</span> <span class="ss">type: </span><span class="s2">"button"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"flex-none w-8 h-8 text-slate-600 hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;svg</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Com as classes <code class="language-plaintext highlighter-rouge">fixed</code> e <code class="language-plaintext highlighter-rouge">z-40</code>, o tailwind irá montar um CSS que sobrepõe o formulário em cima
do resto do conteúdo da página. Somado com <code class="language-plaintext highlighter-rouge">h-screen</code>, <code class="language-plaintext highlighter-rouge">w-screen</code>, <code class="language-plaintext highlighter-rouge">bg-gray-600</code> e <code class="language-plaintext highlighter-rouge">bg-opacity-50</code>,
significa que esse <em>modal</em> ocupará a tela toda, mas com background na cor cinza e transparente.
Também aproveitei para trocar o botão vermelho <del>gritante, que ficou horrível,</del> de “Close” por um
ícone “x” cinza escuro mais discreto no canto superior direito, ficando assim:
<img src="/assets/posts/tailwind-modal.webp" alt="tailwind modal" class="align-center" /></p>

<h3 id="mais-ações-com-stimulus">Mais ações com Stimulus</h3>
<p>Por enquanto o <em>modal</em> só é fechado ao clicar no ícone “x”, precisaríamos, no mínimo, fechar também
após a inserção bem sucedida de um <em>chore</em>. Felizmente, o pacote Hotwire Turbo emite uma série de
eventos que permitem rastrear o ciclo de navegação. A lista completa desses eventos pode ser
verificada <a href="https://turbo.hotwired.dev/reference/events" target="_blank">aqui</a>.</p>

<p>Para o nosso caso, temos o evento <code class="language-plaintext highlighter-rouge">turbo:submit-end</code> que é disparado logo depois que uma submissão
de formulário é feita, armazenando as propriedade de <code class="language-plaintext highlighter-rouge">FormSubmissionResult</code>, ou seja, o resultado
da submissão, em <code class="language-plaintext highlighter-rouge">event.detail</code>. Assim, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/javascript/controllers/chore_modal_controller.js" target="_blank">app/javascript/controllers/chore_modal_controller.js</a>,
temos:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file app/javascript/controllers/chore_modal_controller.js of blog-part-3.2 branch</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Controller</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@hotwired/stimulus</span><span class="dl">"</span>

<span class="c1">// Connects to data-controller="chore-modal"</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
  <span class="c1">// action: "chore-modal#hideModal"</span>
  <span class="nx">hideModal</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="c1">// action: "turbo:submit-end-&gt;chore-modal#submitEnd"</span>
  <span class="nx">submitEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// add this method</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">hideModal</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Perceba que verificamos se <code class="language-plaintext highlighter-rouge">e.detail</code> foi bem sucedido para então chamar o método <code class="language-plaintext highlighter-rouge">hideModal()</code>.
Vale ressaltar que o método nomeado <code class="language-plaintext highlighter-rouge">submitEnd()</code> <strong>não está relacionado</strong> ainda ao evento
<code class="language-plaintext highlighter-rouge">turbo:submit-end</code>. Isso deve ser feito no atributo <code class="language-plaintext highlighter-rouge">data-action</code> onde <code class="language-plaintext highlighter-rouge">ChoreModalController</code> é
chamado, ou seja, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.2 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span>
      <span class="ss">controller: </span><span class="s2">"chore-modal"</span><span class="p">,</span>
      <span class="ss">action: </span><span class="s2">"turbo:submit-end-&gt;chore-modal#submitEnd"</span> <span class="c1"># add this</span>
    <span class="p">},</span>
    <span class="ss">class: </span><span class="s2">"z-40 fixed flex justify-center inset-0 bg-gray-600 bg-opacity-50 h-screen w-screen"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col p-4 m-12 rounded-md w-2/3 h-2/3 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">button_tag</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">action: </span><span class="s2">"chore-modal#hideModal"</span> <span class="p">},</span> <span class="ss">type: </span><span class="s2">"button"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"flex-none w-8 h-8 text-slate-600 hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;svg</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Quando incluo <code class="language-plaintext highlighter-rouge">&lt;div ... data-action="turbo:submit-end-&gt;chore-modal#submitEnd" ...&gt;</code>, agora sim,
estou dizendo para chamar <code class="language-plaintext highlighter-rouge">ChoreModalController#submitEnd()</code> quando o evento <code class="language-plaintext highlighter-rouge">turbo:submit-end</code> for
disparado. Para testar que inserção mal sucedida de um <em>chore</em> não feche o <em>modal</em>, inclui o seguinte
validador em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/models/chore.rb" target="_blank">app/models/chore.rb</a>:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file app/models/chore.rb of blog-part-3.2 branch</span>

<span class="k">class</span> <span class="nc">Chore</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span> <span class="c1"># add this</span>
<span class="k">end</span>
</code></pre></div></div>

<p>O resultado ficou o seguinte:
<img src="/assets/posts/gifs/turbo--submit-end--event.gif" alt="Turbo submit-end event" class="align-center" /></p>

<p>Aproveitei outros eventos para implementar mais situações em que o usuário gostaria que o <em>modal</em>
feche, no caso ao pressionar a tecla ESC e ao clicar “fora” do <em>modal</em>, ou seja, no background cinza
transparente. Em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/javascript/controllers/chore_modal_controller.js" target="_blank">app/javascript/controllers/chore_modal_controller.js</a>:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file app/javascript/controllers/chore_modal_controller.js of blog-part-3.2 branch</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Controller</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@hotwired/stimulus</span><span class="dl">"</span>

<span class="c1">// Connects to data-controller="chore-modal"</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">targets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">form</span><span class="dl">"</span><span class="p">]</span> <span class="c1">// required to track when user are clicling outside the form</span>

  <span class="c1">// hide modal</span>
  <span class="c1">// action: "chore-modal#hideModal"</span>
  <span class="nx">hideModal</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentElement</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">remove</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="c1">// hide modal on successful form submission</span>
  <span class="c1">// action: "turbo:submit-end-&gt;chore-modal#submitEnd"</span>
  <span class="nx">submitEnd</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">hideModal</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// hide modal when clicking ESC</span>
  <span class="c1">// action: "keyup@window-&gt;chore-modal#closeWithKeyboard"</span>
  <span class="nx">closeWithKeyboard</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">code</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">Escape</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">hideModal</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// hide modal when clicking outside of modal</span>
  <span class="c1">// action: "click@window-&gt;chore-modal#closeBackground"</span>
  <span class="nx">closeBackground</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">formTarget</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// check with user are clicking inside the form</span>
      <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">hideModal</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Novamente, vale ressaltar, os eventos são definidos dentro do html com o atributo
<code class="language-plaintext highlighter-rouge">data-action="..."</code>. No caso, eu usei os eventos <code class="language-plaintext highlighter-rouge">keyup@window</code> e <code class="language-plaintext highlighter-rouge">click@window</code>, vinculados ao
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model" target="_blank">objeto DOM</a>.
Você pode ler mais sobre esses eventos
<a href="https://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture" target="_blank">aqui</a>.</p>

<p>Para esses novos métodos, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
incluí:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.2 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span>
      <span class="ss">controller: </span><span class="s2">"chore-modal"</span><span class="p">,</span>
      <span class="c1"># add all other actions, separated with space, as the following</span>
      <span class="ss">action: </span><span class="s2">"turbo:submit-end-&gt;chore-modal#submitEnd keyup@window-&gt;chore-modal#closeWithKeyboard click@window-&gt;chore-modal#closeBackground"</span>
    <span class="p">},</span>
    <span class="ss">class: </span><span class="s2">"z-40 fixed flex justify-center inset-0 bg-gray-600 bg-opacity-50 h-screen w-screen"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">chore_modal_target: </span><span class="s2">"form"</span> <span class="p">},</span> <span class="c1"># add this data target</span>
      <span class="ss">class: </span><span class="s2">"flex flex-col p-4 m-12 rounded-md w-2/3 h-2/3 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">button_tag</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">action: </span><span class="s2">"chore-modal#hideModal"</span> <span class="p">},</span> <span class="ss">type: </span><span class="s2">"button"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"flex-none w-8 h-8 text-slate-600 hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;svg</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Repare que uso também o atributo <code class="language-plaintext highlighter-rouge">&lt;div data-chore-modal-target="form" ...&gt;</code> em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
isso corresponde a <a href="https://stimulus.hotwired.dev/reference/targets" target="_blank">uma funcionalidade</a>
do pacote Hotwire Stimulus que nos permite referenciar um elemento, ou seja, no caso para que o
método <code class="language-plaintext highlighter-rouge">ChoreModalController#closeBackground()</code> saiba quando o usuário clica fora do formulário no
<em>modal</em>, e é justamento por isso que defino o <em>target</em>, como é possível ver na linha
<code class="language-plaintext highlighter-rouge">static targets = ["form"]</code> em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/javascript/controllers/chore_modal_controller.js" target="_blank">app/javascript/controllers/chore_modal_controller.js</a>,
acessível dentro de <code class="language-plaintext highlighter-rouge">ChoreModalController</code> com <code class="language-plaintext highlighter-rouge">this.formTarget</code>, ou seja, na forma
<code class="language-plaintext highlighter-rouge">this.&lt;target name&gt;Target</code>.</p>

<p>Tudo o que foi feito até aqui é o que corresponde a <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2">blog-part-3.2</a>.</p>

<h3 id="bonus-aplicando-o-modal-com-viewcomponent">Bonus: aplicando o modal com ViewComponent</h3>
<p>Até agora o <em>modal</em> está disponível apenas na <em>view</em>
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.2/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
logo teria que replicar o código para a <em>view</em> de edição, o que não é organizacionalmente correto.
Para fazer isso, ao invés de criar o clássico <a href="https://guides.rubyonrails.org/layouts_and_rendering.html#using-partials" target="_blank"><em>partial</em> do Rails</a>,
resolvi testar a gema <a href="https://viewcomponent.org/" target="_blank">ViewComponent</a> que,
resumindo grosseiramente, permite a “componentização” dinâmica de “pedaços de html”, conceito
introduzido pelo framework <a href="https://reactjs.org/" target="_blank">React</a>.</p>

<p>No
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/Gemfile" target="_blank">Gemfile</a>,
incluí:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"view_component"</span>
</code></pre></div></div>

<p>E o instalei com:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>Depois gerei um novo componente com o comando:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate component ChoreModal title
      create  app/components/chore_modal_component.rb
      invoke  rspec
      create    spec/components/chore_modal_component_spec.rb
      invoke  erb
      create    app/components/chore_modal_component.html.erb
</code></pre></div></div>

<p>Como o comando acima, ViewComponent irá criar já com <code class="language-plaintext highlighter-rouge">initialize()</code> para a variável <code class="language-plaintext highlighter-rouge">title</code>, da qual
irei utilizar para nomear o <em>modal</em> quando for de inserção e quando for de edição. Além disso, como
utilizo Turbo Frame, preciso inserir também <code class="language-plaintext highlighter-rouge">include Turbo::FramesHelper</code> em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/app/components/chore_modal_component.rb" target="_blank">app/components/chore_modal_component.rb</a>:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ChoreModalComponent</span> <span class="o">&lt;</span> <span class="no">ViewComponent</span><span class="o">::</span><span class="no">Base</span>
  <span class="kp">include</span> <span class="no">Turbo</span><span class="o">::</span><span class="no">FramesHelper</span> <span class="c1"># add this</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">:)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Então, eu basicamente passei todo código do <em>modal</em> para
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/app/components/chore_modal_component.html.erb" target="_blank">app/components/chore_modal_component.html.erb</a>:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/components/chore_modal_component.html.erb of blog-part-3.3 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_frame_tag</span> <span class="s2">"modal"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span>
      <span class="ss">controller: </span><span class="s2">"chore-modal"</span><span class="p">,</span>
      <span class="ss">action: </span><span class="s2">"turbo:submit-end-&gt;chore-modal#submitEnd keyup@window-&gt;chore-modal#closeWithKeyboard click@window-&gt;chore-modal#closeBackground"</span>
    <span class="p">},</span>
    <span class="ss">class: </span><span class="s2">"z-40 fixed flex justify-center inset-0 bg-gray-600 bg-opacity-50 h-screen w-screen"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">tag</span><span class="p">.</span><span class="nf">div</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">chore_modal_target: </span><span class="s2">"form"</span> <span class="p">},</span>
      <span class="ss">class: </span><span class="s2">"flex flex-col p-4 m-12 rounded-md w-2/3 h-2/3 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"text-2xl font-semibold"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">button_tag</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">action: </span><span class="s2">"chore-modal#hideModal"</span> <span class="p">},</span> <span class="ss">type: </span><span class="s2">"button"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"flex-none w-8 h-8 text-slate-600 hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;svg</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span> <span class="na">width=</span><span class="s">"32"</span> <span class="na">height=</span><span class="s">"32"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">content</span> <span class="cp">%&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>A linha com <code class="language-plaintext highlighter-rouge">&lt;%= content %&gt;</code> irá renderizar o conteúdo do bloco onde <code class="language-plaintext highlighter-rouge">ChoreModalComponent.new</code> for
chamado, ou seja, respectivamente para
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/app/views/chores/new.html.erb" target="_blank">app/views/chores/new.html.erb</a>,
e para
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/app/views/chores/edit.html.erb" target="_blank">app/views/chores/edit.html.erb</a>,
ficando assim, respectivamente:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/new.html.erb of blog-part-3.3 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="no">ChoreModalComponent</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"New Chore"</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="c">&lt;!-- file app/views/chores/edit.html.erb of blog-part-3.3 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="no">ChoreModalComponent</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Editing Chore"</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Feito essas inclusões, se você subir o servidor Rails com <code class="language-plaintext highlighter-rouge">bin/dev</code>, notará que a aparência não é a
de antes, algo como:
<img src="/assets/posts/bug-tailwind-viewcomponent.webp" alt="Bug Tailwind + ViewComponent" class="align-center" /></p>

<p><strong>Por quê?</strong> Acontece que preciso agora informar o Tailwind, para “olhar” também para os
arquivos presente na pasta <code class="language-plaintext highlighter-rouge">app/components/</code>. Sendo assim, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/tailwind.config.js" target="_blank">tailwind.config.js</a>:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file tailwind.config.js of blog-part-3.3 branch</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jit</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span>
    <span class="dl">'</span><span class="s1">./app/views/**/*.{erb,html}</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">./app/components/**/*.{erb,html}</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// add this</span>
    <span class="dl">'</span><span class="s1">./app/helpers/**/*.rb</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">./app/javascript/**/*.js</span><span class="dl">'</span>
  <span class="p">],</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Além disso, precisamos “linkar” a edição de um <em>chore</em>, para isso eu aproveitei o ícone de edição
que tínhamos incluído, mas que estava <em>dummy</em>. Em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-3.3/app/views/chores/_chore.html.erb" target="_blank">app/views/chores/_chore.html.erb</a>,
temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span>
  <span class="na">id=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">dom_id</span> <span class="n">chore</span> <span class="cp">%&gt;</span><span class="s">"</span>
  <span class="na">class=</span><span class="s">"p-3 my-3 bg-white shadow-lg group transition duration-700 ease-in-out transform hover:scale-125 hover:z-10 rounded-md"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text-lg font-bold leading-snug text-gray-900 mr-0.5"</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;time</span>
        <span class="na">datetime=</span><span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">created_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%Y-%m-%d"</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="err">
        </span><span class="s">class="invisible</span> <span class="na">text-sm</span> <span class="na">text-indigo-700</span> <span class="na">group-hover:visible</span><span class="err">"</span>
      <span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">created_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%b %d"</span><span class="p">)</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/time&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"leading-snug text-gray-900"</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">content</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-end space-x-2"</span><span class="nt">&gt;</span>
      <span class="c">&lt;!-- replace the dummy button as following --&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">button_to</span> <span class="n">edit_chore_path</span><span class="p">(</span><span class="n">chore</span><span class="p">),</span> <span class="ss">method: :get</span><span class="p">,</span> <span class="ss">data: </span><span class="p">{</span> <span class="ss">turbo_frame: </span><span class="s1">'modal'</span> <span class="p">},</span> <span class="k">class</span><span class="ss">:"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;svg</span> <span class="na">stroke=</span><span class="s">"currentColor"</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">stroke-width=</span><span class="s">"1.7"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/svg&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">button_to</span> <span class="n">chore_path</span><span class="p">(</span><span class="n">chore</span><span class="p">),</span> <span class="ss">method: :delete</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span> <span class="k">do</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;svg</span> <span class="na">stroke=</span><span class="s">"currentColor"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">stroke-width=</span><span class="s">"0"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"</span><span class="nt">&gt;&lt;/path&gt;&lt;path</span> <span class="na">fill-rule=</span><span class="s">"evenodd"</span> <span class="na">d=</span><span class="s">"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/svg&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Pronto!</p>

<p>Minha vontade, como venho escrevendo, era fazer uma aplicação estilo Kanban. No final das contas
ficou apenas um quadro com tarefas/anotações dispostas sem qualquer ordem. Seria legal ter colunas
de estados, algo como o clássico <em>to do</em>, <em>doing</em>, <em>testing</em> e <em>done</em>; usuários com autenticação e
algum grau de hierarquia. Enfim, também não implementei nenhum teste, apesar de ter deixado
instalado e configurado o RSpec. Quem sabe eu faço isso no futuro, não sei ainda.</p>

<p>Por agora, é isso.</p>

<div class="tenor-gif-embed" data-postid="24697418" data-share-method="host" data-aspect-ratio="1" data-width="100%">
  <a href="https://tenor.com/view/baby-yoda-love-cute-gif-24697418"></a>
  <a href="https://tenor.com/search/baby-gifs">Baby GIFs</a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Tutorial" /><category term="Rails" /><category term="Ruby" /><category term="Tailwind" /><category term="Hotwire" /><summary type="html"><![CDATA[Na parte anterior deste tutorial eu expliquei como utilizar a renderização parcial de html com turbo_stream do Hotwire Turbo, o que nos permitiu mostrar os cards recém inseridos ou excluídos do nosso humilde protótipo de Kanban. Agora vou abordar sobre o pacote Hotwire Stimulus.]]></summary></entry><entry><title type="html">Hoje eu aprendi: Vale a pena configurar seus dotfiles</title><link href="https://callmarx.github.io/blog/2022/06/08/dotfiles.html" rel="alternate" type="text/html" title="Hoje eu aprendi: Vale a pena configurar seus dotfiles" /><published>2022-06-08T16:58:19-03:00</published><updated>2022-06-08T16:58:19-03:00</updated><id>https://callmarx.github.io/blog/2022/06/08/dotfiles</id><content type="html" xml:base="https://callmarx.github.io/blog/2022/06/08/dotfiles.html"><![CDATA[<p><img src="/assets/posts/dotfiles.png" alt="dotfiles" class="align-center" /></p>

<p>Depois de mais de 3 anos usando Vim como IDE (<em>Integrated Development Environment</em>), migrando no
caminho para o <a href="https://neovim.io/" target="_blank">Neovim</a> com o <em>shell</em> <code class="language-plaintext highlighter-rouge">zsh</code>, o gerenciador
<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank"><em>Oh My Zsh</em></a> e o tema
<a href="https://github.com/romkatv/powerlevel10k" target="_blank"><em>Powerlevel10k</em></a>, percebi como eu
dependia dessas configurações e como as mesmas estavam <del>totalmente</del> desorganizadas. Resolvi então,
seguir os passos dos <a href="https://github.com/tpope" target="_blank">grandes mestres</a> e criar o meu
repositório <a href="https://github.com/callmarx/dotfiles" target="_blank"><em>dotfiles</em></a>.
<!-- excerpt-separator --></p>

<h2 id="o-que-são-dotfiles">O que são “dotfiles”?</h2>
<p>No linux (mais especificamente em todos os sistemas baseados em Unix), todo arquivo cujo nome
comece com o caracter ponto é tratado, automaticamente, como um arquivo oculto. Muitos programas
(navegador, editor de texto, player de vídeo/áudio etc) armazenam as configurações do usuário em
arquivos de texto puro, ou seja, editáveis e esses arquivos normalmente são <em>dotfiles</em>.</p>

<p>Por exemplo, na pasta <em>home</em> de um usuário comum em uma instalação Linux, podemos encontrar algo
como:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">~/.bashrc</code> sobre as configurações do <em>shell bash</em></li>
  <li><code class="language-plaintext highlighter-rouge">~/.python_history</code> que é o histórico de comandos feitos no terminal <em>python</em>,</li>
  <li><code class="language-plaintext highlighter-rouge">~/.gitconfig</code> onde fica as configurações do <em>git</em></li>
</ul>

<p class="notice--info"><strong>OBS</strong>: Há inclusive pastas inteiras, com diversos arquivos, para as configurações de um único
programa. Você pode ver isso na pasta <code class="language-plaintext highlighter-rouge">~/.config</code>, por exemplo, ou ainda na pasta <code class="language-plaintext highlighter-rouge">~/.mozilla</code>,
caso utilize o navegador <em>Firefox</em>.</p>

<h2 id="instalar-linux-é-legal-mas-cansa">Instalar Linux é legal, mas cansa.</h2>
<p>Depois de 10 anos usando Linux (e a propósito, eu uso <em>Arch Linux</em>, pra não deixar o
<a href="https://knowyourmeme.com/memes/btw-i-use-arch" target="_blank">meme</a> morrer), a “pira” de ficar
sempre instalando e configurando <del>para mostrar que eu uso Arch</del>, uma hora cansa. Quando lidamos
também com o ambiente de desenvolvimento, o trabalho é dobrado: configurar o <em>git</em>, emulador de
terminal, <em>IDE</em> etc. Mas meu maior motivador para criar o
<a href="https://github.com/callmarx/dotfiles" target="_blank">meu próprio repositório</a> foi o <em>Vim</em>.</p>

<p>Com a volta <del>infelizmente</del> do trabalho presencial, precisei desaposentar meu notebook. Como
troquei a SSD, precisei reinstalar o Linux e configurar todo meu ambiente. Isso me fez, inclusive,
perceber como determinadas configurações do meu <em>Neovim</em> estavam uma completa bagunça: <em>plugins</em> que
não usava mais, arquivos muito longos, edições que fiz no passado e não lembrava mais porque eu fiz.
Criar o seu próprio <em>dotfiles</em> não é apenas ter um repositório “de backup”, mas uma espaço de
documentação e organização.</p>

<h2 id="quanto-antes-começar-antes-acaba">Quanto antes começar, antes acaba</h2>
<p>Não pretendia explicar aqui como criar o seu repositório <em>dotfiles</em>, com um passo-a-passo ou algo
assim, mas expor minha experiência e, quem sabe, motivá-lo a fazer o seu. Trata-se de algo muito
pessoal já que guarda as suas configurações, suas preferências. Segue abaixo alguns tutoriais que
me ajudaram bastante:</p>
<ul>
  <li><a href="https://dotfiles.github.io/" target="_blank">GitHub does dotfiles</a>: Site que reúne uma série
de guias e tutoriais para criar o seu dotfiles no github.</li>
  <li><a href="https://www.freecodecamp.org/news/dotfiles-what-is-a-dot-file-and-how-to-create-it-in-mac-and-linux/" target="_blank">Dotfiles – What is a Dotfile and How to Create it in Mac and Linux</a>:
Tutorial do FreeCodeCamp. Dá um passo-a-passo inicial bem razoável e explica, entre
outras coisas, a questão de links simbólicos, dos quais você precisará para fazer com que seus
programas olhem para os arquivos do seu repositório.</li>
  <li><a href="https://youtu.be/r_MpUP6aKiQ" target="_blank">~/.dotfiles in 100 Seconds</a>: Vídeo bem simples
e leve do <a href="https://fireship.io/" target="_blank">Fireship</a>, explicando (em 100 segundos) o que é
e porque fazer.</li>
  <li><a href="https://www.youtube.com/watch?v=ctH-a-1eUME&amp;list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ" target="_blank">Neovim IDE from Scratch</a>:
Uma <strong>fantástica</strong> lista de vídeos explicando do zero como configurar o <em>Neovim</em> com a linguagem
<em>lua</em>. Me ajudou demais!</li>
</ul>

<p class="notice--warning"><strong>Cuidado</strong>: Não recomendo utilizar o dotfiles de terceiros, mas fique a vontade para consultar o que
fiz (e pretendo continuar atualizando), disponível
<a href="https://github.com/callmarx/dotfiles" target="_blank">aqui</a>.</p>

<div class="tenor-gif-embed" data-postid="16087071" data-share-method="host" data-aspect-ratio="1.78771" data-width="100%">
  <a href="https://tenor.com/view/mood-heart-beat-wolf-of-wall-street-matthew-mcconaughey-good-one-gif-16087071">Mood Heart Beat GIF</a>from <a href="https://tenor.com/search/mood-gifs"></a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p>Por agora, é isso.</p>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Hoje-eu-aprendi" /><category term="Config" /><category term="Vim" /><category term="Neovim" /><category term="dotfiles" /><category term="Linux" /><summary type="html"><![CDATA[Porque eu (finalmente) configurei meus "dotfiles".]]></summary></entry><entry><title type="html">Tutorial: Rails7, Tailwind e Hotwire - Parte 2</title><link href="https://callmarx.github.io/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html" rel="alternate" type="text/html" title="Tutorial: Rails7, Tailwind e Hotwire - Parte 2" /><published>2021-12-19T14:42:03-03:00</published><updated>2021-12-19T14:42:03-03:00</updated><id>https://callmarx.github.io/blog/2021/12/19/tutorial-rails7-hotwire-parte-2</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html"><![CDATA[<p><img src="/assets/posts/hotwire-turbo.webp" alt="Hotwire Turbo" class="align-center" /></p>

<p>Na <a href="/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html" target="_blank">parte anterior</a>
deste tutorial eu expliquei como customizar e utilizar o Tailwind sem uma linha sequer de CSS e
JavaScript. Agora vou abordar um pouco sobre o pacote
<a href="https://turbo.hotwired.dev" target="_blank">Hotwire Turbo</a>.
<!-- excerpt-separator --></p>

<h2 id="objetivo-geral">Objetivo Geral</h2>
<p>A meta é desenvolver (e aprender) utilizando Rails 7, esbuild, Tailwind e Hotwire (Turbo e
Stimulus), mas meu foco será mais sobre o pacote Hotwire e como ele pode nos ajudar. Conforme
avanço nos estudos e na implementação, vou complementando este tutorial. Por enquanto temos:</p>
<ul>
  <li><a href="/blog/2021/12/07/tutorial-rails7-hotwire.html" target="_blank">Parte 0: Rails 7</a></li>
  <li><a href="/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html" target="_blank">Parte 1: Tailwind</a></li>
  <li><a href="#etapa-2---hotwire-turbo">Parte 2: Hotwire Turbo</a> → página atual</li>
  <li><del>Parte 3: Hotwire Stimulus</del> → em breve</li>
</ul>

<p>O pano de fundo é uma aplicação estilo Kanban, com um quadro em que podemos incluir, ver, editar e
excluir os cards/tarefas e isso ser persistido simultaneamente via <em>websockets</em> para todas as
sessões abertas da aplicação. Todo código esta disponível neste
<a href="https://github.com/callmarx/LearningHotwire" target="_blank">repositório</a>. Note que incluí
algumas <a href="https://github.com/callmarx/LearningHotwire/branches/all" target="_blank"><em>branches</em></a> que
representam as partes abordadas aqui.</p>

<h2 id="etapa-2---hotwire-turbo">Etapa 2 - Hotwire Turbo</h2>
<p>Nesta etapa explico sobre a proposta desta ferramenta e implemento o modo <em>render</em> <code class="language-plaintext highlighter-rouge">turbo_stream</code>
juntamente com o <code class="language-plaintext highlighter-rouge">broadcast</code> via <em>ActionCable</em>. O resultado desta etapa eu dividi em duas partes:
a <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-2.1" target="_blank">blog-part-2.1</a>,
em que uso apenas o <code class="language-plaintext highlighter-rouge">turbo_stream</code> sem <code class="language-plaintext highlighter-rouge">broadcast</code>, e a final com <code class="language-plaintext highlighter-rouge">broadcast</code> na <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-2.2" target="_blank">blog-part-2.2</a>.</p>

<h3 id="conceitualmente-turbina-o-que">Conceitualmente: Turbina o que?</h3>
<p>Consultando a introdução do
<a href="https://turbo.hotwired.dev/handbook/introduction" target="_blank">Handbook</a>, e fazendo uma
tradução livre, conceitualmente temos um pacote que</p>
<blockquote>
  <p>Agrupa uma série de ferramentas para criar aplicações web velozes, modernas e de aprimoramento
progressivo, sem muito JavaScript.</p>
</blockquote>

<p>Talvez a tradução de
<a href="https://www.freecodecamp.org/news/what-is-progressive-enhancement-and-why-it-matters-e80c7aaf834a/" target="_blank"><em>Progressive Enhancement</em></a> -
“aprimoramento progressivo” - não soe muito claro. Criado em 2003, trata-se basicamente de uma
estratégia de design, de arquitetura web, que enfatiza o carregamento progressivo da página,
priorizando o conteúdo principal (HTML) e distribuindo os demais (CSS, JavaScript, HTML adicionais
etc) em outras camadas de apresentação/carregamento.</p>

<p>Continuando minha tradução livre sobre as diretrizes do <em>Hotwire Turbo</em></p>
<blockquote>
  <p>Oferece uma alternativa mais simples contra a predominância das estruturas do lado do cliente,
das quais colocam toda a lógica no front-end, confinando o lado do servidor da aplicação a ser
pouco mais do que uma API JSON.</p>
</blockquote>

<p>Este é o <strong>trecho que mais me chamou atenção</strong>, me conquistou, me incentivou a estudar e querer
utilizar isso. A “<em>predominância das estruturas do lado do cliente</em>” é algo que vem me chamando
atenção nos últimos anos, parece que <strong>de repente toda área do back-end foi “<em>confinada</em>” à API
JSON</strong>. Porém, com todo dinamismo que hoje em dia uma página web precisa, como processamento de
dados de acordo com o comportamento do usuário e da navegação, isso acabou sendo feito pelo lado
cliente, front-end, via JavaScript com bibliotecas como jQuery. Como determinadas lógicas desse
processamento devem estar protegidas no back-end, não podendo serem completamente expostas no
front-end, ou seja, não podendo serem totalmente feitas no lado cliente da aplicação, <strong>nos
deparamos eventualmente com “<em>espelhamentos da lógica em ambos os lados</em>“</strong>. E as diretrizes
continuam exatamente nesse sentido.</p>
<blockquote>
  <p>Com Turbo você permite que o servidor entregue HTML diretamente (…). Você não lidera mais com
espelhamento da lógica em ambos os lados da aplicação, permeados via JSON. Toda lógica reside no
servidor e o navegador lida apenas com o HTML final.</p>
</blockquote>

<p>É o conceito de <em>HTML-Over-The-Wire</em> - Hotwire. 🤓</p>

<h3 id="turbo-frame-vs-turbo-stream"><em>Turbo Frame</em> VS. <em>Turbo Stream</em></h3>
<p>Algo que me confundiu bastante no começo foi a demora em entender a diferença entre <em>Turbo Frame</em> e
<em>Turbo Stream</em>, pois tratam-se de abordagens diferentes. Felizmente eu encontrei essa tabela
publicada pelo
<a href="https://medium.com/pragmatic-programmers/turbo-frames-vs-turbo-streams-4eee1c574d23" target="_blank"><em>The Pragmatic Programmers</em></a>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------+---------------------------------------------------------------------------+
                Turbo Frames                                 |                     Turbo Streams                                                       |
----------------------------------------------------------------------------+--------------------------------------------------------------------------+
Altera apenas um elemento do DOM por requisição.             |  Altera inúmeros elementos do DOM por requisição.
Consegui apenas atualizar o elemento interno do HTML.        |  Pode concatenar ou preceder um novo elemento, além de atualizar ou remover um elemento.
Afeta apenas elementos dentro da tag turbo-frame com DOM ID. |  Afeta qualquer tipo de elemento HTML desde que tenha um DOM ID para ser referenciado.
É "ativado" na requisição dentro do elemento turbo-frame.    |  Ativado também via ActionCable/broadcasts.
</code></pre></div></div>

<p class="notice--info"><strong>OBS</strong>: Não pretendo utilizar o <em>Turbo Frames</em> neste projeto. Talvez eu repense isso para
aproveitar a funcionalidade de <em>lazily load</em>, mas se for o caso adicionarei um post separado sobre
isso.</p>

<h3 id="começando-apenas-com-turbo-stream">Começando apenas com <em>Turbo Stream</em></h3>
<p>Para explicar separadamente o modo <em>render</em> <code class="language-plaintext highlighter-rouge">turbo_stream</code> eu incluí o código desta subparte na
<em>branch</em> <a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-2.1" target="_blank">blog-part-2.1</a>.</p>

<p>No <code class="language-plaintext highlighter-rouge">ChoresController</code> que geramos com <code class="language-plaintext highlighter-rouge">rails generate scaffold</code> na
<a href="/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html#um-simples-scaffold" target="_blank">etapa anterior</a>
deste tutorial, por padrão o Rails incluiu múltiplos formatos de renderização, no caso HTML e JSON.
Como incluímos <code class="language-plaintext highlighter-rouge">gem "turbo-rails"</code> no Gemfile, temos acesso também à renderização via <em>Turbo Stream</em>,
bastando adicionar <code class="language-plaintext highlighter-rouge">format.turbo_stream</code> dentro do bloco <code class="language-plaintext highlighter-rouge">respond_to do |format|</code>. Fazendo isso
para os métodos <em>create</em> e <em>destroy</em>, temos em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/controllers/chores_controller.rb" target="_blank">app/controllers/chores_controller.rb</a>:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file app/controllers/chores_controller.rb of blog-part-2.1 branch</span>
<span class="k">class</span> <span class="nc">ChoresController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="o">...</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="o">...</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="k">if</span> <span class="vi">@chore</span><span class="p">.</span><span class="nf">save</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">turbo_stream</span> <span class="c1"># include this</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@chore</span><span class="p">,</span> <span class="ss">notice: </span><span class="s2">"Chore was successfully created."</span> <span class="p">}</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">status: :created</span><span class="p">,</span> <span class="ss">location: </span><span class="vi">@chore</span> <span class="p">}</span>
      <span class="k">else</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">status: :unprocessable_entity</span> <span class="p">}</span>
        <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@chore</span><span class="p">.</span><span class="nf">errors</span><span class="p">,</span> <span class="ss">status: :unprocessable_entity</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">...</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@chore</span><span class="p">.</span><span class="nf">destroy</span>
    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">turbo_stream</span> <span class="c1"># include this</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">chores_url</span><span class="p">,</span> <span class="ss">notice: </span><span class="s2">"Chore was successfully destroyed."</span> <span class="p">}</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Para esse tipo de renderização também precisamos de arquivos dedicados em <code class="language-plaintext highlighter-rouge">app/views</code>, como o temos
para HTML e JSON. Sendo assim, temos o seguinte
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/views/chores/create.turbo_stream.erb" target="_blank">app/views/chores/create.turbo_stream.erb</a>:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/create.turbo_stream.erb of blog-part-2.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream</span><span class="p">.</span><span class="nf">append</span> <span class="s2">"chores"</span><span class="p">,</span> <span class="ss">partial: </span><span class="s2">"chores/chore"</span><span class="p">,</span> <span class="ss">locals: </span><span class="p">{</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="p">}</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream</span><span class="p">.</span><span class="nf">replace</span> <span class="s2">"chore_form"</span><span class="p">,</span> <span class="ss">partial: </span><span class="s2">"chores/form"</span><span class="p">,</span> <span class="ss">locals: </span><span class="p">{</span> <span class="ss">chore: </span><span class="no">Chore</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Como queremos ver a aplicação disso sem recarregar uma página inteira, ou seja, poder <strong>renderizar
apenas uma parte</strong> da página, o faremos no <em>index</em> de <em>chores</em>. Por isso usamos os métodos
<code class="language-plaintext highlighter-rouge">turbo_stream.append</code> e <code class="language-plaintext highlighter-rouge">turbo_stream.replace</code> acima apontados para o DOM ID da página, ou seja,
respectivamente os primeiros argumentos <code class="language-plaintext highlighter-rouge">"chores"</code> e <code class="language-plaintext highlighter-rouge">"chore_form"</code> devem estar presentes na página
<strong>completamente renderizada</strong> por
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/views/chores/index.html.erb" target="_blank">app/views/chores/index.html.erb</a>.
Sendo isso assim precisamos incluir <code class="language-plaintext highlighter-rouge">id="chores"</code> na <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> que envolve a listagem dos <em>chores</em>:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/index.html.erb  of blog-part-2.1 branch --&gt;</span>
<span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chores"</span> <span class="err">...</span><span class="nt">&gt;</span> <span class="c">&lt;!-- include id="chores" for turbo_stream.append --&gt;</span>
      <span class="cp">&lt;%</span> <span class="vi">@chores</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">chore</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"chore"</span><span class="p">,</span> <span class="n">chore</span><span class="ss">:chore</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>               <span class="c">&lt;!-- don't include id="chore_form" here!         --&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Agora, para <code class="language-plaintext highlighter-rouge">id="chore_form"</code>, não podemos incluir na <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> que envolve
<code class="language-plaintext highlighter-rouge">&lt;%= render "form", chore: @chore %&gt;</code> pois o método <code class="language-plaintext highlighter-rouge">turbo_stream.replace</code> <strong>substitui completamente
o elemento</strong> e como o fazemos substituindo pelo <em>partial view</em>
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/views/chores/_form.html.erb" target="_blank">app/views/chores/_form.html.erb</a>
essa <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> seria apagada, sendo assim devemos incluir <code class="language-plaintext highlighter-rouge">id="chore_form"</code> no próprio arquivo <em>form</em>:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/_form.html.erb  of blog-part-2.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">form_with</span><span class="p">(</span><span class="ss">model: </span><span class="n">chore</span><span class="p">,</span> <span class="ss">id: </span><span class="s2">"chore_form"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  ...
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Agora, para excluir um <em>chore</em> é ainda mais simples, temos o seguinte
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/views/chores/destroy.turbo_stream.erb" target="_blank">app/views/chores/destroy.turbo_stream.erb</a></p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/destroy.turbo_stream.erb of blog-part-2.1 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream</span><span class="p">.</span><span class="nf">remove</span> <span class="n">dom_id</span><span class="p">(</span><span class="vi">@chore</span><span class="p">)</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Da mesma forma, devemos incluir o DOM ID, mas no caso um específico para cada <em>chore</em>, por isso o
<code class="language-plaintext highlighter-rouge">dom_id(@chore)</code>. Além disso, também precisamos editar o <code class="language-plaintext highlighter-rouge">&lt;button&gt;</code> do ícone de exclusão para
apontar para o método <em>destroy</em> do <em>controller</em>, sendo assim em:
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.1/app/views/chores/_chore.html.erb" target="_blank">app/views/chores/_chore.html.erb</a></p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/_chore.html.erb of blog-part-2.1 branch --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">dom_id</span><span class="p">(</span><span class="n">chore</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="err">...</span><span class="nt">&gt;</span> <span class="c">&lt;!-- include dom_id(chore) for turbo_stream.remove --&gt;</span>
  <span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
      ...
      <span class="cp">&lt;%=</span> <span class="n">button_to</span> <span class="n">chore_path</span><span class="p">(</span><span class="n">chore</span><span class="p">),</span> <span class="ss">method: :delete</span><span class="p">,</span> <span class="ss">class: </span><span class="o">...</span> <span class="k">do</span> <span class="cp">%&gt;</span> <span class="c">&lt;!-- make button point to delete method --&gt;</span>
        <span class="nt">&lt;svg</span> <span class="err">...</span><span class="nt">&gt;</span>
          ...
        <span class="nt">&lt;/svg&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      ...
</code></pre></div></div>

<p>Agora, ao remover um <em>chore</em>, também teremos uma <strong>renderização parcialmente</strong> que remove o HTML do
<em>chore</em> excluído sem recarregar toda a página. O resultado final desta subparte, ao criar ou
excluir um <em>chore</em> em <a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a>, é o seguinte:</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://drive.google.com/file/d/1pIKgDLLIK4LFVMVSQmc-p0xUKjYtiqNI/preview" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<p class="notice--info"><strong>OBS</strong>: Note que não há um carregamento total da página a cada inclusão ou exclusão, a página é
recarregada parcialmente via
<a href="https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API/Using_Fetch" target="_blank"><em>fetch</em></a>.</p>

<p>Porém, se você abrir duas janelas de <a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a> e incluir ou
excluir <em>chores</em> em uma delas verá que as alterações são feitas apenas na janela que está
manipulando isso, <strong>não haverá persistência em todas as sessões</strong>. Para isso precisamos fazer via
<em>ActionCable</em> com <code class="language-plaintext highlighter-rouge">broadcast</code>.</p>

<h3 id="aplicando-broadcast">Aplicando <em>broadcast</em></h3>
<p>Aqui corresponde a parte final desta etapa do tutorial. A subparte anterior foi apenas para
explicar o uso isolado do <em>render</em> <code class="language-plaintext highlighter-rouge">turbo_stream</code>, como objetivo é uma aplicação estilo Kanban
pretendo utilizar majoritariamente esse <em>render</em> juntamente com <code class="language-plaintext highlighter-rouge">broadcast</code> daqui para frente. O
código completo desta etapa está na <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-2.2" target="_blank">blog-part-2.2</a>.</p>

<p>Para aplicarmos as alterações dos <em>chores</em> em todas as sessões utilizaremos o
<code class="language-plaintext highlighter-rouge">Turbo::StreamsChannel</code> que vem com a gema <code class="language-plaintext highlighter-rouge">turbo-rails</code>, podendo ser chamado diretamente no
<em>model</em> ou no <em>controller</em> dependendo da abordagem que desejar. A ideia aqui é que <strong>estaremos
implementando as renderizações parciais em um padrão
<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern" target="_blank">Publish/Subscribe</a></strong>.
Por trás dos panos estaremos usando o <em>Active Jobs</em> para “publicar” (<em>publish</em>) a renderização
parcial do <code class="language-plaintext highlighter-rouge">turbo_stream</code> de maneira assíncrona e o <em>Action Cable</em> para entregar essas atualizações
aos “assinantes” (<em>subscribers</em>).</p>

<p>No caso, nossos “assinantes” são todas as sessões abertas de
<a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a> e podemos mapear isso usando o helper
<code class="language-plaintext highlighter-rouge">turbo_stream_from</code>. Sendo assim, em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.2/app/views/chores/index.html.erb" target="_blank">app/views/chores/index.html.erb</a>,
temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/index.html.erb  of blog-part-2.2 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream_from</span> <span class="s2">"chores"</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Como disse antes, podemos incluir <code class="language-plaintext highlighter-rouge">Turbo::StreamsChannel</code> no <em>model</em> ou <em>controller</em> para cobrir as
modificações de <em>create</em>, <em>update</em> e <em>delete</em>, mais especificamente através dos métodos
<code class="language-plaintext highlighter-rouge">.broadcast_append_to</code>, <code class="language-plaintext highlighter-rouge">.broadcast_replace_to</code>, <code class="language-plaintext highlighter-rouge">.broadcast_remove_to</code> entre outros. Se incluirmos
isso no <em>model</em> através de <em>Active Record Callbacks</em>, como <code class="language-plaintext highlighter-rouge">after_create_commit</code>, <strong>toda vez que o
<em>model</em> for alterado</strong> iremos disparar “publicações” de renderização parcial. Como por enquanto eu
quero disparar as alterações feitas apenas através de requisições do usuário - não quero que
<code class="language-plaintext highlighter-rouge">rails db:seed</code> dispare isso, por exemplo - optei por incluir no <em>controller</em>. Sendo assim em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.2/app/controllers/chores_controller.rb" target="_blank">app/controllers/chores_controller.rb</a>,
temos:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file app/controllers/chores_controller.rb of blog-part-2.2 branch</span>
<span class="k">class</span> <span class="nc">ChoresController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_action</span> <span class="ss">:set_chore</span><span class="p">,</span> <span class="ss">only: </span><span class="sx">%i[ show edit update destroy ]</span>
  <span class="n">after_action</span> <span class="ss">:broadcast_insert</span><span class="p">,</span> <span class="ss">only: </span><span class="sx">%i[create]</span>
  <span class="n">after_action</span> <span class="ss">:broadcast_remove</span><span class="p">,</span> <span class="ss">only: </span><span class="sx">%i[destroy]</span>

  <span class="o">...</span>

  <span class="kp">private</span>
    <span class="o">...</span>
    <span class="k">def</span> <span class="nf">broadcast_insert</span>
      <span class="k">return</span> <span class="k">if</span> <span class="vi">@chore</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span>
      <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_append_to</span><span class="p">(</span>
        <span class="s2">"chores"</span><span class="p">,</span>
        <span class="ss">target: </span><span class="s2">"chores"</span><span class="p">,</span>
        <span class="ss">partial: </span><span class="s2">"chores/chore"</span><span class="p">,</span>
        <span class="ss">locals: </span><span class="p">{</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="p">}</span>
      <span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">broadcast_remove</span>
      <span class="k">return</span> <span class="k">unless</span> <span class="vi">@chore</span><span class="p">.</span><span class="nf">destroyed?</span>
      <span class="no">Turbo</span><span class="o">::</span><span class="no">StreamsChannel</span><span class="p">.</span><span class="nf">broadcast_remove_to</span><span class="p">(</span>
        <span class="s2">"chores"</span><span class="p">,</span>
        <span class="ss">target: </span><span class="no">ActionView</span><span class="o">::</span><span class="no">RecordIdentifier</span><span class="p">.</span><span class="nf">dom_id</span><span class="p">(</span><span class="vi">@chore</span><span class="p">)</span>
      <span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Como os métodos privados <code class="language-plaintext highlighter-rouge">broadcast_insert</code> e <code class="language-plaintext highlighter-rouge">broadcast_remove</code> acima já fazem a inserção e
exclusão dos <em>chores</em> não precisamos mais fazer isso nas <em>views</em> <code class="language-plaintext highlighter-rouge">*.turbo_stream.erb</code> que criamos
na subparte anterior, por isso para essa parte final eu excluí a <em>view</em>
<code class="language-plaintext highlighter-rouge">app/views/destroy.turbo_stream.erb</code> e mantive
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-2.2/app/views/chores/create.turbo_stream.erb" target="_blank">app/views/chores/create.turbo_stream.erb</a>,
com apenas:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- file app/views/chores/create.turbo_stream.erb of blog-part-2.2 branch --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">turbo_stream</span><span class="p">.</span><span class="nf">replace</span> <span class="s2">"chore_form"</span><span class="p">,</span> <span class="ss">partial: </span><span class="s2">"chores/form"</span><span class="p">,</span> <span class="ss">locals: </span><span class="p">{</span> <span class="ss">chore: </span><span class="no">Chore</span><span class="p">.</span><span class="nf">new</span> <span class="p">}</span> <span class="cp">%&gt;</span>
</code></pre></div></div>
<p class="notice--info"><strong>OBS</strong>: Não sei se você notou, mas não estamos “publicando” o <em>replace</em> do <em>form</em> via <em>ActionCable</em>
como as outras renderizações parciais. Mantive aqui o <code class="language-plaintext highlighter-rouge">turbo_stream</code> para sessão corrente apenas, o
que faz total sentido já que não precisamos limpar o <em>form</em> nas outras sessões, inclusive se
fizermos isso poderemos apagar o <em>form</em> de um outro usuário que o está preenchendo e não submeteu
ainda.</p>

<p>Pronto! Basta subir o projeto com <code class="language-plaintext highlighter-rouge">bin/dev</code> e acessar em mais de uma janela
<a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a>, você deve obter este resultado final:</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://drive.google.com/file/d/1DmtL-9P9SylUJet2MJjMrqiHCySCCng5/preview" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<div class="tenor-gif-embed" data-postid="14693686" data-share-method="host" data-aspect-ratio="1.78771" data-width="100%">
  <a href="https://tenor.com/view/nice-finger-gone-well-done-happy-woohoo-gif-14693686"></a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Tutorial" /><category term="Rails" /><category term="Ruby" /><category term="Tailwind" /><category term="Hotwire" /><summary type="html"><![CDATA[Parte 2: Renderização parcial com Hotwire Turbo - Tutorial sobre Rails 7 com esbuild, tailwind e Hotwire (Turbo e Stimulus). Como desenvolver um aplicação estilo Kanban, com cards/tarefas e persistência simultânea via websockets.]]></summary></entry><entry><title type="html">Tutorial: Rails7, Tailwind e Hotwire - Parte 1</title><link href="https://callmarx.github.io/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html" rel="alternate" type="text/html" title="Tutorial: Rails7, Tailwind e Hotwire - Parte 1" /><published>2021-12-09T11:12:54-03:00</published><updated>2021-12-09T11:12:54-03:00</updated><id>https://callmarx.github.io/blog/2021/12/09/tutorial-rails7-hotwire-parte-1</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html"><![CDATA[<p><img src="/assets/posts/tailwind.webp" alt="Tailwind" class="align-center" /></p>

<p>Na <a href="/blog/2021/12/07/tutorial-rails7-hotwire.html" target="_blank">parte anterior</a> deste
tutorial, expliquei como configurar o Rails 7, com suas novas opções e como “dockerizei” os bancos
de dados PostgreSQL e Redis. Agora vou abordar um pouco sobre Tailwind.
<!-- excerpt-separator --></p>

<h2 id="objetivo-geral">Objetivo Geral</h2>
<p>A meta é desenvolver (e aprender) utilizando Rails 7, esbuild, Tailwind e Hotwire (Turbo e
Stimulus), mas meu foco será mais sobre o pacote Hotwire e como ele pode nos ajudar. Conforme
avanço nos estudos e na implementação, vou complementando este tutorial. Por enquanto temos:</p>
<ul>
  <li><a href="/blog/2021/12/07/tutorial-rails7-hotwire.html" target="_blank">Parte 0: Rails 7</a></li>
  <li><a href="#etapa-1---tailwind">Parte 1: Tailwind</a> → página atual</li>
  <li><a href="/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html" target="_blank">Parte 2: Hotwire Turbo</a></li>
  <li><del>Parte 3: Hotwire Stimulus</del> → em breve</li>
</ul>

<p>O pano de fundo é uma aplicação estilo Kanban, com um quadro em que podemos incluir, ver, editar e
excluir os cards/tarefas e isso ser persistido simultaneamente via <em>websockets</em> para todas as
sessões abertas da aplicação. Todo código esta disponível neste
<a href="https://github.com/callmarx/LearningHotwire" target="_blank">repositório</a>. Note que incluí
algumas <a href="https://github.com/callmarx/LearningHotwire/branches/all" target="_blank"><em>branches</em></a> que
representam as partes abordadas aqui.</p>

<h2 id="etapa-1---tailwind">Etapa 1 - Tailwind</h2>
<p>Nesta parte explico como utilizar e customizar o Tailwind. O resultado final desta etapa é o
disponível na <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-1" target="_blank">blog-part-1</a>.</p>

<h3 id="um-simples-scaffold">Um simples <em>scaffold</em></h3>
<p>Antes de começar a brincar com HTML <del>e CSS</del> eu gerei um conjunto simples de <em>models</em>,
<em>controllers</em> e <em>views</em> de <strong><em>chores</em></strong> (do inglês, equivalente à tarefas, pequenos trabalhos,
designação etc).</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails generate scaffold chore title:string content:text
</code></pre></div></div>

<p>E também um
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/db/seeds.rb" target="_blank">db/seeds.rb</a>
para já termos algo à visualizar no <em>index</em>.</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># db/seeds.rb</span>
<span class="no">Chore</span><span class="p">.</span><span class="nf">create</span><span class="p">([</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"Gave up"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"Would it save you a lot of time if I just gave up and went mad now?"</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">15</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"More than big"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"Space is big. You just won't believe how vastly, hugely, mind-bogglingly big it is. I mean, you may think it's a long way down the road to the chemist's, but that's just peanuts to space."</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">4</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"What did happen?"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"For a moment, nothing happened. Then, after a second or so, nothing continued to happen."</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">9</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"About be President"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"Anyone who is capable of getting themselves made President should on no account be allowed to do the job."</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">36</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"UX/UI"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"A common mistake that people make when trying to design something completely foolproof is to underestimate the ingenuity of complete fools"</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">6</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title: </span><span class="s2">"42"</span><span class="p">,</span>
    <span class="ss">content: </span><span class="s2">"Forty-two."</span><span class="p">,</span>
    <span class="ss">created_at: </span><span class="mi">1</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span>
  <span class="p">},</span>
<span class="p">])</span>
</code></pre></div></div>

<p>E rodei as <em>migrations</em> e o <em>seeds</em>.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails db:migrate <span class="o">&amp;&amp;</span> rails db:seed
</code></pre></div></div>

<h3 id="não-configurando-o-tailwindo">Não configurando o Tailwindo</h3>
<p>Acessando <a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a> você deve obter algo como o seguinte.
<img src="/assets/posts/ugly-chores.webp" alt="ugly-chores" class="align-center" /></p>

<blockquote>
  <p>“Ué?” - Eu, quando vi esta tela.</p>
</blockquote>

<p>Parece que o tailwind não está configurado, mas confia, esta sim. Se você envolver o conteúdo por
algo como <code class="language-plaintext highlighter-rouge">&lt;div class="text-gray-100 bg-gray-900"&gt; ... &lt;/div&gt;</code>, que são classes do Tailwind, verá a
mesma página com fundo escuro (<code class="language-plaintext highlighter-rouge">bg-gray-900</code>) e o texto claro (<code class="language-plaintext highlighter-rouge">text-gray-100</code>).</p>

<p>Seria algo assim:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/index.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-gray-100 bg-gray-900"</span>
  <span class="err">&lt;</span><span class="na">p</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="n">notice</span> <span class="cp">%&gt;</span><span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;h1&gt;</span>Chores<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chores"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@chores</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"New chore"</span><span class="p">,</span> <span class="n">new_chore_path</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Acontece que o comando <code class="language-plaintext highlighter-rouge">rails generate scaffold</code> do rails 7 não vêm com um algum tipo de “layout
padrão de geração” de <em>views</em> para o Tailwind, o mesmo vale para <code class="language-plaintext highlighter-rouge">rails generate controller</code>. Então
cabe à nós editar, mas Tailwind é mamão com mel, confia.</p>

<h3 id="customizando-tailwind">Customizando Tailwind</h3>
<p>Para customizar ou incluir funcionalidades basta editar o arquivo
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/tailwind.config.js" target="_blank">tailwind.config.js</a>
na raiz do projeto. Na
<a href="/blog/2021/12/07/tutorial-rails7-hotwire.html" target="_blank">parte anterior</a> deste
tutorial, quando criamos o projeto com a <em>flag</em> <code class="language-plaintext highlighter-rouge">--css tailwind</code> o Rails já nos faz o trabalho de
instalar e referenciar o framework.</p>

<p class="notice--info"><strong>UPDATE</strong>: No momento em que estava escrevendo este post saiu a
<a href="https://tailwindcss.com/blog/tailwindcss-v3" target="_blank">versão 3 do tailwind</a> e mudou tudo
que tinha customizado 🤡. Inclui a atualização para nova versão no repositório.</p>

<p>Eu fiz algumas customizações para exemplificar aqui no blog, mas recomendo a leitura da
<a href="https://tailwindcss.com/docs/configuration" target="_blank">documentação oficial</a>, muito boa
por sinal.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// tailwind.config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jit</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span> <span class="c1">// 'purge' foi substituido por 'content' na v3.</span>
    <span class="dl">'</span><span class="s1">./app/views/**/*.html.erb</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">./app/helpers/**/*.rb</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">./app/javascript/**/*.js</span><span class="dl">'</span>
  <span class="p">],</span>
  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">spacing</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">100</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">25rem</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">104</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">26rem</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">108</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">27rem</span><span class="dl">'</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">112</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">28rem</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">colors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">wood</span><span class="p">:</span> <span class="p">{</span>
          <span class="mi">50</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#f7eee9</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">100</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#efddd3</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">150</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#e7cdbd</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">200</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#dfbca7</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">250</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#d7ac91</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">300</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#cf9b7b</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">350</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#c78a65</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">400</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#bf7a4f</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">450</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#b76939</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">500</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#af5924</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">550</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#9d5020</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">600</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#8c471c</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">650</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#7a3e19</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">700</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#693515</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">750</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#572c12</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">800</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#46230e</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">850</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#341a0a</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">900</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#231107</span><span class="dl">'</span><span class="p">,</span>
          <span class="mi">950</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#110803</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Explico:</p>

<p><strong>Primeiro</strong> incluí um conjunto “manual” de cores que nomeei como <code class="language-plaintext highlighter-rouge">wood</code>, com graduações de 50 à 950.
Ou seja, com isso você tem acesso a classes como <code class="language-plaintext highlighter-rouge">bg-wood-650</code> (equivalente à <em>background color</em>
<a href="https://www.colorhexa.com/7a3e19" target="_blank">#7a3e19</a>), <code class="language-plaintext highlighter-rouge">text-wood-300</code> (equivalente à
<em>text color</em> <a href="https://www.colorhexa.com/cf9b7b" target="_blank">#cf9b7b</a>), <code class="language-plaintext highlighter-rouge">border-wood-850</code>
(equivalente à <em>border color</em> <a href="https://www.colorhexa.com/341a0a" target="_blank">#341a0a</a>) etc.
No final das contas eu acabei nem usando essas cores <del>porque achei que ficou tudo com cara de cor
de cocô</del>, mas fique a vontade em utilizá-las. Você pode ver mais sobre isso aqui
<a href="https://tailwindcss.com/docs/customizing-colors" target="_blank">https://tailwindcss.com/docs/customizing-colors</a>.</p>

<p><strong>Depois</strong> aumentei os valores dos “espaçamentos”. Quando ponho, por exemplo, <code class="language-plaintext highlighter-rouge">'108': '27rem'</code>
dentro das chaves <code class="language-plaintext highlighter-rouge">spacing: { ... }</code>, tenho acesso à classes como <code class="language-plaintext highlighter-rouge">p-108</code> (<em>padding</em> de <em>27rem</em>),
<code class="language-plaintext highlighter-rouge">m-108</code> (<em>margin</em> de <em>27rem</em>), <code class="language-plaintext highlighter-rouge">h-108</code> (<em>height</em> de <em>27rem</em>) etc. Você pode ver mais sobre isso
aqui <a href="https://tailwindcss.com/docs/customizing-spacing" target="_blank">https://tailwindcss.com/docs/customizing-spacing</a>.</p>

<h3 id="sou-um-designer-preguiçoso">Sou um designer preguiçoso</h3>
<p>Sem mais delongas, depois de <del>me cansar de ficar enfeitando as páginas</del> um tempinho
experimentando eu alterei os seguintes arquivos.</p>

<p>Em <a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/app/views/chores/index.html.erb" target="_blank">app/views/chores/index.html.erb</a></p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/index.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"z-0 flex flex-col justify-start h-screen justify-items-center bg-slate-300"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"z-0 w-4/5 mx-auto mt-4 overflow-hidden h-2/3 bg-slate-200 rounded-md transition transform duration-600 ease-in-out hover:bg-slate-400 hover:overflow-visible"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chores"</span> <span class="na">class=</span><span class="s">"z-0 px-5 pt-1 pb-3 grid grid-cols-3 gap-2"</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%</span> <span class="vi">@chores</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">chore</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"chore"</span><span class="p">,</span> <span class="n">chore</span><span class="ss">:chore</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-4/5 mx-auto my-4 h-80 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Em <a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/app/views/chores/_chore.html.erb" target="_blank">app/views/chores/_chore.html.erb</a></p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/_chore.html.erb --&gt;</span>
<span class="nt">&lt;div</span>
  <span class="na">id=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">dom_id</span> <span class="n">chore</span> <span class="cp">%&gt;</span><span class="s">"</span>
  <span class="na">class=</span><span class="s">"p-3 my-3 bg-white shadow-lg group transition duration-700 ease-in-out transform hover:scale-125 hover:z-10 rounded-md"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-between"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text-lg font-semibold leading-snug text-gray-900 mr-0.5"</span><span class="nt">&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;time</span>
          <span class="na">datetime=</span><span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">created_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%Y-%m-%d"</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="err">
          </span><span class="s">class="invisible</span> <span class="na">text-sm</span> <span class="na">text-indigo-700</span> <span class="na">group-hover:visible</span><span class="err">"</span>
        <span class="nt">&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">created_at</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%b %d"</span><span class="p">)</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;/time&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"leading-snug text-gray-900"</span><span class="nt">&gt;</span>
          <span class="cp">&lt;%=</span> <span class="n">chore</span><span class="p">.</span><span class="nf">content</span> <span class="cp">%&gt;</span>
        <span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex justify-end space-x-2"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">stroke=</span><span class="s">"currentColor"</span> <span class="na">fill=</span><span class="s">"none"</span> <span class="na">stroke-width=</span><span class="s">"1.7"</span> <span class="na">viewBox=</span><span class="s">"0 0 24 24"</span> <span class="na">stroke-linecap=</span><span class="s">"round"</span> <span class="na">stroke-linejoin=</span><span class="s">"round"</span><span class="nt">&gt;</span>
              <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"</span><span class="nt">/&gt;</span>
              <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/svg&gt;</span>
          <span class="nt">&lt;/button&gt;</span>
          <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;svg</span> <span class="na">stroke=</span><span class="s">"currentColor"</span> <span class="na">fill=</span><span class="s">"currentColor"</span> <span class="na">stroke-width=</span><span class="s">"0"</span> <span class="na">viewBox=</span><span class="s">"0 0 16 16"</span><span class="nt">&gt;</span>
              <span class="nt">&lt;path</span> <span class="na">d=</span><span class="s">"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"</span><span class="nt">&gt;&lt;/path&gt;&lt;path</span> <span class="na">fill-rule=</span><span class="s">"evenodd"</span> <span class="na">d=</span><span class="s">"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/svg&gt;</span>
          <span class="nt">&lt;/button&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>E em <a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/app/views/chores/_form.html.erb" target="_blank">app/views/chores/_form.html.erb</a></p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/_form.html.erb --&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">form_with</span><span class="p">(</span><span class="ss">model: </span><span class="n">chore</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">chore</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"error_explanation"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span><span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="n">chore</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span> <span class="cp">%&gt;</span> prohibited this chore from being saved:<span class="nt">&lt;/h2&gt;</span>

      <span class="nt">&lt;ul&gt;</span>
        <span class="cp">&lt;%</span> <span class="n">chore</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">error</span><span class="p">.</span><span class="nf">full_message</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"items-center mt-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col w-5/6 mx-auto"</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">placeholder: </span><span class="s2">"Title"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"p-3 mt-2 leading-none text-gray-900 bg-gray-100 border border-gray-200 rounded"</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col w-5/6 mx-auto"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">placeholder: </span><span class="s2">"Content"</span><span class="p">,</span> <span class="ss">class: </span><span class="s2">"h-40 p-3 mt-2 text-base leading-none text-gray-900 bg-gray-100 border border-gray-200 rounded"</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex items-center justify-center w-full"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="ss">class: </span><span class="s2">"px-10 py-4 my-2 font-semibold leading-none text-white rounded bg-slate-700 hover:bg-slate-900"</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>
<p>Essas alterações correspondem basicamente ao que há na <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-1" target="_blank">blog-part-1</a>.
Então, agora se você subir o projeto com <code class="language-plaintext highlighter-rouge">bin/dev</code> e acessar <a href="http://localhost:3000/chores" target="_blank">http://localhost:3000/chores</a>,
deve obter este resultado:</p>

<!-- Courtesy of embedresponsively.com //-->

<div class="responsive-video-container">
    <iframe src="https://drive.google.com/file/d/1fidDQRgSkofbW09cng6YfiGL1AHXTlQ5/preview" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
  </div>

<p>E isso <strong>sem uma <del><em>fucking</em></del> linha</strong> de JavaScript e CSS!</p>

<div class="tenor-gif-embed" data-postid="7714163" data-share-method="host" data-aspect-ratio="1" data-width="100%">
  <a href="https://tenor.com/view/friends-matt-leblanc-matt-shock-omg-gif-7714163"></a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<h3 id="como-pode">Como pode?!</h3>
<p>Vou tentar explicar aqui algumas das classes do Tailwind que inclui HTML das quais permitiram esse
resultado.</p>

<p><strong>Primeiro</strong> vamos as <em>divs</em> que separam o “quadro de tarefas” da “inserção de uma nova tarefa” em
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/app/views/chores/index.html.erb" target="_blank">app/views/chores/index.html.erb</a>.
Na <em>div</em> de inserção, temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/index.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
  ...
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-4/5 mx-auto my-4 h-80 bg-slate-200 rounded-md hover:bg-slate-400 transition duration-600 ease-linear"</span><span class="nt">&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"form"</span><span class="p">,</span> <span class="ss">chore: </span><span class="vi">@chore</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>A classe <code class="language-plaintext highlighter-rouge">bg-slate-200</code> com <code class="language-plaintext highlighter-rouge">hover:bg-slate-400</code> montam o gatilho de <em>mouseover</em>, alterando a cor
de fundo de “<em>slate-200</em>” para “<em>slate-400</em>” quando passamos o mouse por cima. Adicionando ainda o
conjunto <code class="language-plaintext highlighter-rouge">transition duration-600 ease-linear</code> à isso, temos essa transição com um efeito gradual,
mais sutil aos olhos. A classe <code class="language-plaintext highlighter-rouge">duration-600</code> impõe um tempo de 600 milissegundos para essa
transição. Você pode ver mais sobre isso em
<a href="https://tailwindcss.com/docs/transition-timing-function" target="_blank">https://tailwindcss.com/docs/transition-timing-function</a>.</p>

<p>Na <em>div</em> do quadro de tarefas, temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/index.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"z-0 w-4/5 mx-auto mt-4 overflow-hidden h-2/3 bg-slate-200 rounded-md transition transform duration-600 ease-in-out hover:bg-slate-400 hover:overflow-visible"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/div&gt;</span>
  ...
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>As classes <code class="language-plaintext highlighter-rouge">bg-slate-200</code> e <code class="language-plaintext highlighter-rouge">overflow-hidden</code> com <code class="language-plaintext highlighter-rouge">hover:bg-slate-400</code> e <code class="language-plaintext highlighter-rouge">hover:overflow-visible</code>,
montam o gatilho de <em>mouseover</em> não apenas para mudar a cor, mas também para mudar o comportamento
do “transbordar de conteúdo” - <code class="language-plaintext highlighter-rouge">overflow-hidden</code> omite as tarefas que não couberem na <em>div</em> (quando
você redimensiona a janela do navegador, por exemplo), mas ao passar o mouse por cima isso é
alterando para <code class="language-plaintext highlighter-rouge">overflow-visible</code>, tornando as tarefas visíveis. Novamente, com o conjunto
<code class="language-plaintext highlighter-rouge">transition transform duration-600 ease-linear</code> à isso para termos a transição gradual.</p>

<p><strong>Agora</strong> vamos as tarefas, no arquivo
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-1/app/views/chores/_chore.html.erb" target="_blank">app/views/chores/_chore.html.erb</a>,
para explicar os efeitos de “aumentar o card da tarefa” e o de “exibir os ícones de edição e
remoção”.</p>

<p>Na <em>div</em> mais externa, a primeira, temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/_chore.html.erb --&gt;</span>
<span class="nt">&lt;div</span>
  <span class="err">...</span>
  <span class="na">class=</span><span class="s">"p-3 my-3 bg-white shadow-lg group transition duration-700 ease-in-out transform hover:scale-125 hover:z-10 rounded-md"</span>
<span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>Com as classes <code class="language-plaintext highlighter-rouge">hover:scale-125</code> e <code class="language-plaintext highlighter-rouge">hover:z-10</code>, montamos o gatilho para aumentar seu tamanho com
<code class="language-plaintext highlighter-rouge">scale-125</code> e sobrepor qualquer outro conteúdo com <code class="language-plaintext highlighter-rouge">z-10</code>. Também incluí o conjunto <code class="language-plaintext highlighter-rouge">transition
transform duration-600 ease-linear</code> para a transição gradual. Note também que incluí a classe
<code class="language-plaintext highlighter-rouge">group</code>, ela serve para mapear a parte seguinte.</p>

<p>Nas tags <em>button</em> que envolvem os SVG dos ícones de edição e remoção, temos:</p>
<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/chores/_chore.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex flex-col"</span><span class="nt">&gt;</span>
      ...
      <span class="nt">&lt;div</span> <span class="err">...</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- botão de edição --&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;svg</span> <span class="err">...</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="nt">&lt;/button&gt;</span>
        <span class="c">&lt;!-- botão de remoção --&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"invisible w-5 h-5 text-indigo-500 cursor-pointer group-hover:visible hover:text-black transition-all duration-600 ease-in-out"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;svg</span> <span class="err">...</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/svg&gt;</span>
        <span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>Com as classes <code class="language-plaintext highlighter-rouge">invisible</code> e <code class="language-plaintext highlighter-rouge">group-hover:visible</code> em ambos <code class="language-plaintext highlighter-rouge">&lt;button&gt; ... &lt;/button&gt;</code>, somado à
classe <code class="language-plaintext highlighter-rouge">group</code> que adicionei na <em>div</em> mais externa, a “pai” de todas, como pontuei antes, dizemos
ao Tailwind que ao passar o mouse dentro dessa <em>div</em> mais externa é para tornar visível ambos os
botões, simples assim! Trata-se de um <em>efeito em grupo</em>. Note que o <em>efeito individual</em> de cada
botão, no caso o de alterar a cor de preenchimento dos ícones com <code class="language-plaintext highlighter-rouge">text-indigo-500</code> e
<code class="language-plaintext highlighter-rouge">hover:text-black</code>, é diferente, será acionado quando passamos o mouse no ícone, individualmente.
Você pode ver mais sobre isso em
<a href="https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state" target="_blank">https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state</a>.</p>

<p class="notice--info"><strong>Recomendo</strong>: No
<a href="https://www.youtube.com/channel/UCy1H38XrN7hi7wHSClfXPqQ" target="_blank">canal do Adam Wathan no YouTube</a>
há várias <em>lives</em> gravadas em que ele monta um layout do zero com Tailwind, mexendo apenas com HTML,
muito bom!</p>

<p>Por agora, é isso.</p>
<div class="tenor-gif-embed" data-postid="16435573" data-share-method="host" data-aspect-ratio="1.5311" data-width="100%">
  <a href="https://tenor.com/view/cat-driving-leaving-meow-im-leaving-right-meow-gif-16435573">
&lt;/div&gt;
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>
</a></div>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Tutorial" /><category term="Rails" /><category term="Ruby" /><category term="Tailwind" /><category term="Hotwire" /><summary type="html"><![CDATA[Parte 1: Montando um layout com Tailwind - Tutorial sobre Rails 7 com esbuild, tailwind e Hotwire(Turbo e Stimulus). Como desenvolver um aplicação estilo Kanban, com cards/tarefas e persistência simultânea via websockets.]]></summary></entry><entry><title type="html">Tutorial: Rails7, Tailwind e Hotwire</title><link href="https://callmarx.github.io/blog/2021/12/07/tutorial-rails7-hotwire.html" rel="alternate" type="text/html" title="Tutorial: Rails7, Tailwind e Hotwire" /><published>2021-12-07T17:48:12-03:00</published><updated>2021-12-07T17:48:12-03:00</updated><id>https://callmarx.github.io/blog/2021/12/07/tutorial-rails7-hotwire</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/12/07/tutorial-rails7-hotwire.html"><![CDATA[<p><img src="/assets/posts/rails7-tailwind-hotwire.webp" alt="Rails 7 + Tailwind + Hotwire" class="align-center" /></p>

<p><br />
Depois de meses desenvolvendo em Typescript com <a href="https://docs.nestjs.com/" target="_blank">NestJS</a>
por demanda do meu atual trabalho, consegui um tempinho para meu tão amado Ruby on Rails. Melhor
ainda agora, como não trabalho oficialmente com Rails, posso me dar o luxo de me aventurar na
versão 7, recém lançada em modo alfa, em meus projetos pessoais.
<!-- excerpt-separator --></p>

<p class="notice--info"><strong>OBS:</strong> Pretendo escrever alguns artigos sobre minhas cabeçadas com NestJS e Typescript. Alguns
temas que pretendo abordar é <em>TypeOrm</em> com <em>migrations</em> e aplicação Multitenant usando PostgreSQL
RLS.</p>

<h2 id="objetivo-geral">Objetivo Geral</h2>
<p>Neste tutorial eu pretendo desenvolver (e aprender) utilizando Rails 7, esbuild, Tailwind e Hotwire
(Turbo e Stimulus), mas meu foco será mais sobre o pacote Hotwire e como ele pode nos ajudar.
Conforme avanço nos estudos e na implementação, vou complementando este tutorial. Por enquanto
temos:</p>
<ul>
  <li><a href="#etapa-zero---rails-7">Parte 0: Rails 7</a> → página atual</li>
  <li><a href="/blog/2021/12/09/tutorial-rails7-hotwire-parte-1.html" target="_blank">Parte 1: Tailwind</a></li>
  <li><a href="/blog/2021/12/19/tutorial-rails7-hotwire-parte-2.html" target="_blank">Parte 2: Hotwire Turbo</a></li>
  <li><del>Parte 3: Hotwire Stimulus</del> → em breve</li>
</ul>

<p>O pano de fundo é uma aplicação estilo Kanban, com um quadro em que podemos incluir, ver, editar e
excluir os cards/tarefas e isso ser persistido simultaneamente via <em>websockets</em> para todas as
sessões abertas da aplicação. Todo código esta disponível neste
<a href="https://github.com/callmarx/LearningHotwire" target="_blank">repositório</a>. Note que incluí
algumas <a href="https://github.com/callmarx/LearningHotwire/branches/all" target="_blank"><em>branches</em></a> que
representam as partes abordadas aqui.</p>

<h2 id="etapa-zero---rails-7">Etapa Zero - Rails 7</h2>
<p>Nesta parte inicial, explico como configurar o Rails 7, com suas novas opções, e como “dockerizar”
os bancos de dados PostgreSQL e Redis. O resultado final desta etapa é o disponível na <em>branch</em>
<a href="https://github.com/callmarx/LearningHotwire/tree/blog-part-0" target="_blank">blog-part-0</a>.</p>

<h3 id="criando-um-novo-projeto-com-rails-7">Criando um novo projeto com Rails 7</h3>
<p>Utilizei as seguintes versões para este projeto:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby <span class="nt">-v</span>
<span class="c"># ruby 3.0.3p157 (2021-11-24 revision 3fb7d2cadc) [x86_64-linux]</span>

<span class="nv">$ </span>rails <span class="nt">-v</span>
<span class="c"># Rails 7.0.0.rc1</span>

<span class="nv">$ </span>yarn <span class="nt">-v</span>
<span class="c"># 1.22.17</span>
</code></pre></div></div>

<p>Criei um novo projeto com o seguinte comando:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails new LearningHotwire <span class="se">\</span>
              <span class="nt">-d</span><span class="o">=</span>postgresql <span class="se">\</span>
              <span class="nt">--skip-test</span> <span class="se">\</span>
              <span class="nt">-j</span> esbuild <span class="se">\</span>
              <span class="nt">--css</span> tailwind
</code></pre></div></div>

<p>Nada de novo nas duas primeiras <em>flags</em>: será uma aplicação com banco de dados PostgreSQL
(<code class="language-plaintext highlighter-rouge">-d=postgresql</code>) e sem o pacote padrão de testes com Minitest (<code class="language-plaintext highlighter-rouge">--skip-test</code>).</p>

<p>Nas duas últimas temos algumas novidades: escolho o <a href="https://esbuild.github.io/" target="_blank"><em>esbuild</em></a>
como <em>JavaScript bundler</em> (<code class="language-plaintext highlighter-rouge">-j esbuild</code>) e o <a href="https://tailwindcss.com" target="_blank"><em>tailwind</em></a>
como <em>CSS processor/framework</em> (<code class="language-plaintext highlighter-rouge">--css tailwind</code>). Estas novas flags correspondem as gemas
<a href="https://github.com/rails/jsbundling-rails" target="_blank"><em>jsbundling-rails</em></a> e
<a href="https://github.com/rails/cssbundling-rails" target="_blank"><em>cssbundling-rails</em></a>, incluídas
automaticamente no Gemfile.</p>

<h3 id="algumas-inclusões">Algumas inclusões</h3>
<p>No <a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/Gemfile" target="_blank">Gemfile</a>
eu removi os comentários e inclui algumas gemas ficando assim:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gemfile</span>
<span class="n">source</span> <span class="s2">"https://rubygems.org"</span>
<span class="n">git_source</span><span class="p">(</span><span class="ss">:github</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">repo</span><span class="o">|</span> <span class="s2">"https://github.com/</span><span class="si">#{</span><span class="n">repo</span><span class="si">}</span><span class="s2">.git"</span> <span class="p">}</span>

<span class="n">ruby</span> <span class="s2">"3.0.3"</span>
<span class="n">gem</span> <span class="s2">"rails"</span><span class="p">,</span> <span class="s2">"~&gt; 7.0.0.rc1"</span>

<span class="n">gem</span> <span class="s2">"cssbundling-rails"</span><span class="p">,</span> <span class="s2">"&gt;= 0.1.0"</span>
<span class="n">gem</span> <span class="s2">"jbuilder"</span><span class="p">,</span> <span class="s2">"~&gt; 2.7"</span>
<span class="n">gem</span> <span class="s2">"jsbundling-rails"</span><span class="p">,</span> <span class="s2">"~&gt; 0.1.0"</span>
<span class="n">gem</span> <span class="s2">"pg"</span><span class="p">,</span> <span class="s2">"~&gt; 1.1"</span>
<span class="n">gem</span> <span class="s2">"puma"</span><span class="p">,</span> <span class="s2">"~&gt; 5.0"</span>
<span class="n">gem</span> <span class="s2">"redis"</span><span class="p">,</span> <span class="s2">"~&gt; 4.0"</span>
<span class="n">gem</span> <span class="s2">"sprockets-rails"</span><span class="p">,</span> <span class="s2">"&gt;= 3.4.1"</span>
<span class="n">gem</span> <span class="s2">"stimulus-rails"</span><span class="p">,</span> <span class="s2">"&gt;= 0.7.3"</span>
<span class="n">gem</span> <span class="s2">"turbo-rails"</span><span class="p">,</span> <span class="s2">"&gt;= 0.9.0"</span>

<span class="n">gem</span> <span class="s2">"bootsnap"</span><span class="p">,</span> <span class="s2">"&gt;= 1.4.4"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>

<span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"byebug"</span>
  <span class="n">gem</span> <span class="s2">"rspec-rails"</span><span class="p">,</span> <span class="s2">"~&gt; 4.0.0"</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"web-console"</span><span class="p">,</span> <span class="s2">"&gt;= 4.1.0"</span>

  <span class="n">gem</span> <span class="s2">"foreman"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubocop"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubocop-packaging"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubocop-performance"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubocop-rails"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubocop-rspec"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
  <span class="n">gem</span> <span class="s2">"rubycritic"</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
<span class="k">end</span>
</code></pre></div></div>

<p>O Redis vem comentado automaticamente, mas vamos utilizá-lo mais a frente para o <em>ActionCable</em> com
o <a href="https://github.com/hotwired/turbo-rails" target="_blank">turbo-rails</a>.</p>

<p>Nos blocos de <code class="language-plaintext highlighter-rouge">:development</code> e <code class="language-plaintext highlighter-rouge">:test</code> inclui algumas gemas para teste e lint. Não sei ainda se vou
ou não desenvolver testes, mas na dúvida instalei o RSpec com o comando padrão
<code class="language-plaintext highlighter-rouge">rails generate rspec:install</code> e inclui arquivos de configuração como
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/.reek.yml" target="_blank">.reek.yml</a>,
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/.rubocop.yml" target="_blank">.rubocop.yml</a>,
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/.rubycritic.yml" target="_blank">.rubycritic.yml</a>,
entre outros.</p>

<h3 id="docker">Docker</h3>
<p>Para facilitar o desenvolvimento eu “dockerizei” o PostgreSQL e Redis com o seguinte
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/docker-compose.yml" target="_blank">docker-compose.yml</a>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:14-alpine</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">learhot-db-ctr</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">256m</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">-c fsync=off --client-min-messages=warning</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db:/var/lib/postgresql/data</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">127.0.0.1:5432:5432"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">postgres</span>
      <span class="na">POSTGRES_INITDB_ARGS</span><span class="pi">:</span> <span class="s1">'</span><span class="s">--encoding=UTF-8</span><span class="nv"> </span><span class="s">--lc-collate=C</span><span class="nv"> </span><span class="s">--lc-ctype=C'</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s">none</span>

  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6-alpine</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">learhot-redis-ctr</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">256m</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">redis-data:/var/lib/redis/data</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">127.0.0.1:6379:6379"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s">none</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
  <span class="na">redis-data</span><span class="pi">:</span>
</code></pre></div></div>

<p>Para se comunicar com esses bancos alterei o
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/config/database.yml" target="_blank">config/database.yml</a>
e o
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/config/cable.yml" target="_blank">config/cable.yml</a>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/database.yml</span>
<span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">UTF8</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">user</span><span class="pi">:</span> <span class="s">postgres</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">postgres</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>

<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">LearningHotwire_development</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">5432</span>

<span class="na">test</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">LearningHotwire_development</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">5432</span>

<span class="c1"># config/cable.yml</span>
<span class="na">development</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">redis</span>
  <span class="na">url</span><span class="pi">:</span> <span class="s">&lt;%= "#{ENV.fetch("REDIS_URL") { "redis://localhost:6379" }}/1" %&gt;</span>
  <span class="na">channel_prefix</span><span class="pi">:</span> <span class="s">LearningHotwire_development</span>

<span class="na">test</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">async</span>

<span class="na">production</span><span class="pi">:</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">redis</span>
  <span class="na">url</span><span class="pi">:</span> <span class="s">&lt;%= "#{ENV.fetch("REDIS_URL") { "redis://localhost:6379" }}/1" %&gt;</span>
  <span class="na">channel_prefix</span><span class="pi">:</span> <span class="s">LearningHotwire_production</span>
</code></pre></div></div>

<h3 id="procfile">Procfile</h3>
<p>Com as novas inclusões de <em>JavaScript bundler</em> e <em>CSS processor/framework</em>, o Rails 7 utiliza para
subir todo o ambiente de desenvolvimento a gema
<a href="https://github.com/ddollar/foreman" target="_blank"><em>foreman</em></a> que chama os processos listados
no arquivo
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/Procfile.dev" target="_blank">Procfile.dev</a>.
Isso tudo porque não mais apenas o servidor do Rails precisa ser executado em modo <em>watch</em>, ou
seja, em modo de reload automático (em inglês chamamos de <em>watch process</em>), mas agora também essas
duas novas inclusões.</p>

<p>Como incluímos o PostgreSQL e Redis no docker, podemos incluir também a chamada <code class="language-plaintext highlighter-rouge">docker-compose up</code>
no
<a href="https://github.com/callmarx/LearningHotwire/blob/blog-part-0/Procfile.dev" target="_blank">Procfile.dev</a>,
ficando assim:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker: docker-compose up
web: bin/rails server -p 3000
js: yarn build --watch
css: yarn build:css --watch
</code></pre></div></div>

<h3 id="yay-youre-on-rails">Yay! You’re on Rails!</h3>
<p>É isso. Basta agora executar o script disponível <code class="language-plaintext highlighter-rouge">bin/dev</code> que chama o <em>foreman</em> para o Procfile
que atualizamos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># esse script já vem com permissão de execução</span>
<span class="nv">$ </span>bin/dev
</code></pre></div></div>

<p>Você deve obter algo assim como saída no seu terminal:
<img src="/assets/posts/bin-dev.webp" alt="bin/dev" class="align-center" /></p>

<p>Não esqueça de criar o banco de dados. Você pode fazer isso agora na página web:
<img src="/assets/posts/create-db-web.webp" alt="create-db-web" class="align-center" /></p>

<p>Ou, em um outro terminal já que precisamos do docker em execução, utilize:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails db:create
</code></pre></div></div>

<p>E acesse <a href="http://localhost:3000/">http://localhost:3000/</a> e veja a clássica telinha do Rails.
<img src="/assets/posts/welcome-rails.webp" alt="welcome-rails" class="align-center" /></p>

<p>Por agora, é isso.</p>
<div class="tenor-gif-embed" data-postid="17519616" data-share-method="host" data-aspect-ratio="1" data-width="100%">
  <a href="https://tenor.com/view/cat-leaving-leave-oops-bye-gif-17519616"></a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js">
</script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Tutorial" /><category term="Rails" /><category term="Ruby" /><category term="Tailwind" /><category term="Hotwire" /><summary type="html"><![CDATA[Tutorial sobre Rails 7 com esbuild, tailwind e Hotwire(Turbo e Stimulus). Como desenvolver um aplicação estilo Kanban, com cards/tarefas e persistência simultânea via websockets.]]></summary></entry><entry><title type="html">Hoje eu aprendi: Gerenciar dockers locais com Portainer CE</title><link href="https://callmarx.github.io/blog/2021/09/03/dockers-e-portainer.html" rel="alternate" type="text/html" title="Hoje eu aprendi: Gerenciar dockers locais com Portainer CE" /><published>2021-09-03T12:09:32-03:00</published><updated>2021-09-03T12:09:32-03:00</updated><id>https://callmarx.github.io/blog/2021/09/03/dockers-e-portainer</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/09/03/dockers-e-portainer.html"><![CDATA[<p><img src="/assets/posts/portainer+docker.webp" alt="Portainer + Docker" /></p>

<p><br />
Mesmo não sendo um especialista, e tendo bem claro isso, ficou óbvio que definitivamente sou um
entusiasta de contêineres. Hoje me deparei com a minha partição <em>root</em> do Linux quase cheia e por
qual motivo? Inúmeras imagens, volumes e contêineres, que a maior parte eu nem estava mais
utilizando, ocupando grande parte do espaço. Eis que o Google me sugere o mamão com mel que é
<a href="https://github.com/portainer/portainer" target="_blank">Portainer CE</a>.
<!-- excerpt-separator --></p>

<h2 id="primeiro-de-tudo">Primeiro de tudo</h2>

<p>Ok vai… Isso de encher minha <em>root</em> por conta do docker já tinha ocorrido outras vezes, confesso.
O que fazia era <em>excluir tudo</em> e então baixar novamente o que fosse precisar. Até porque os
projetos em que atuo (pessoais e do trabalho) estão todos com
<a href="https://docs.docker.com/compose/" target="_blank">docker compose</a> e até um <em>make file</em> com os
comandos pra subir tudo bonitinho,
<a href="https://youtu.be/w-8A4DbXcy4" target="_blank">podem me julgar</a>. Acho legal fazer essa “limpeza”
de tempos em tempos, então segue o comando <strong>por sua conta e risco</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker container stop <span class="si">$(</span>docker container <span class="nb">ls</span> <span class="nt">--all</span> <span class="nt">-q</span><span class="si">)</span>  <span class="c"># para todos os containers</span>
<span class="nv">$ </span>docker system prune <span class="nt">-a</span> <span class="nt">-f</span> <span class="nt">--volumes</span>                    <span class="c"># exclui tudo, CUIDADO!</span>
</code></pre></div></div>
<p class="notice--warning"><strong>Cuidado</strong>: Com esses comandos você vai <u>EXCLUIR TODOS OS contêineres, imagens e volumes</u>
da onde for executado.</p>

<h2 id="mamão-com-mel">Mamão com mel</h2>

<p>Para “instalar” o Portainer CE você precisa de duas linhas de comando, essa GUI é ironicamente
executada em docker :)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker volume create portainer_data
<span class="nv">$ </span>docker run <span class="nt">-d</span> <span class="nt">-p</span> 8000:8000 <span class="nt">-p</span> 9000:9000 <span class="nt">--name</span><span class="o">=</span>portainer <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="nt">-v</span> portainer_data:/data portainer/portainer-ce
</code></pre></div></div>

<p>O primeiro comando cria um volume que será utilizado pelo Portainer que é executado pelo segundo
comando. Nada mais preciso ser feito, basta acessar o endereço <a href="http://localhost:9000/">http://localhost:9000/</a>. No
primeiro acesso ele vai pedir o pra você criar um login de acesso, pessoalmente não ligo isso,
ponho qualquer coisa, afinal é para uso pessoal e local para desenvolvimento.</p>

<p>Você deve ver algo assim na <em>home</em> se tudo der certo:
<img src="/assets/posts/portainer-home.webp" alt="Portainer Home" /></p>

<h2 id="já-passei-por-isso">Já passei por isso</h2>

<p>Talvez você não obtenha um endpoint listando seus contêineres, volumes e imagens, com uma
notificação “<em>Object not found inside the database</em>”, algo como a imagem a seguir.</p>

<p><img src="/assets/posts/portainer-error.webp" alt="Portainer Error" /></p>

<p>Depois de pesquisar um pouco encontrei a solução
<a href="https://github.com/portainer/portainer/issues/3562#issuecomment-620579326" target="_blank">aqui</a>.
Bastou limpar o <em>Storage</em> de <a href="http://localhost:9000">http://localhost:9000</a> do meu navegador. No chromium você faz isso em
“<em>Application</em> &gt; <em>Storage</em> &gt; <em>Clear site data</em>”. Como eu não soube fazer isso de cara (e ninguém
têm obrigação de saber), fiz o <em>screenshot</em> abaixo para mostrar esse cominho.</p>

<p><img src="/assets/posts/clear-storage.webp" alt="Clear Storage" /></p>

<p>Por agora, é isso.</p>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Hoje-eu-aprendi" /><category term="Config" /><category term="Docker" /><summary type="html"><![CDATA[Mini tutorial de gerenciamento local de contêineres com Portainer CE.]]></summary></entry><entry><title type="html">Diário disléxico - Elixir: Os primeiros exercícios</title><link href="https://callmarx.github.io/blog/2021/08/29/diario-dislexico-elixir-primeiros-exercicios.html" rel="alternate" type="text/html" title="Diário disléxico - Elixir: Os primeiros exercícios" /><published>2021-08-29T21:49:12-03:00</published><updated>2021-08-29T21:49:12-03:00</updated><id>https://callmarx.github.io/blog/2021/08/29/diario-dislexico-elixir-primeiros-exercicios</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/08/29/diario-dislexico-elixir-primeiros-exercicios.html"><![CDATA[<div class="tenor-gif-embed" data-postid="7770370" data-share-method="host" data-aspect-ratio="1.16602" data-width="100%"><a href="https://tenor.com/view/gim-gimnasio-pesas-fuerte-james-corden-gif-7770370"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br />
Volto aqui para falar um pouco sobre o que eu aprendi com os exercícios básicos e iniciantes do
<a href="https://exercism.io" target="_blank">https://exercism.io</a> sobre Elixir. Abaixo segue o que eu resolvi da trilha até
agora e o que eu aprendi/utilizei em cada.
<!-- excerpt-separator --></p>
<ul>
  <li><strong>Word Count</strong>: <em>Pipe</em>, <code class="language-plaintext highlighter-rouge">String.split</code> e <em>regex</em></li>
  <li><strong>RNA Transcription</strong>: <em>map</em>, <code class="language-plaintext highlighter-rouge">Enum.map</code> e <em>codepoint</em> de um caractere</li>
  <li><strong>Nucleotide Count</strong>: <em>map</em>, <code class="language-plaintext highlighter-rouge">Enum.reduce</code> e <em>codepoint</em> de um caractere</li>
  <li><strong>Accumulate</strong>: Múltipla definição de funções (nome + aridade) e recursão</li>
  <li><strong>Secret Handshake</strong>: <em>Bitwise</em> e <code class="language-plaintext highlighter-rouge">Enum.reduce</code></li>
  <li><strong>Roman Numerals</strong>: Recursão e argumento opcional</li>
  <li><strong>Beer Song</strong>: <em>case</em>, argumento opcional e <code class="language-plaintext highlighter-rouge">Enum.map_join</code></li>
  <li><strong>Bob</strong>: <em>Regex</em> com <code class="language-plaintext highlighter-rouge">String.match?</code> vs funções auxiliares como <code class="language-plaintext highlighter-rouge">String.trim</code>,
<code class="language-plaintext highlighter-rouge">String.downcase</code> e <code class="language-plaintext highlighter-rouge">String.ends_with?</code></li>
</ul>

<h2 id="word-count">Word Count</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/word-count" target="_blank">aqui</a>.</p>

<p>Exercício simples, perfeito para aplicar a estrutura <em>pipe</em> sem muita dificuldade. Entendi melhor
o uso de <code class="language-plaintext highlighter-rouge">String.split</code> que possui um terceiro argumento opcional, com <code class="language-plaintext highlighter-rouge">trim: true</code> strings vazias
são excluídas da lista resultante.</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">WordCount</span> <span class="k">do</span>
  <span class="nv">@doc</span> <span class="sd">"""
  Count the number of words in the sentence.
  Words are compared case-insensitively.
  """</span>
  <span class="nv">@spec</span> <span class="n">count</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="n">map</span>
  <span class="k">def</span> <span class="n">count</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">String</span><span class="o">.</span><span class="n">downcase</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">~r/[^[:alnum:]-]/u</span><span class="p">,</span> <span class="ss">trim:</span> <span class="no">true</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">frequencies</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="rna-transcription">RNA Transcription</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/rna-transcription" target="_blank">aqui</a>.</p>

<p>Aprendi que <code class="language-plaintext highlighter-rouge">?</code> + <code class="language-plaintext highlighter-rouge">caractere</code> devolve o seu <em>codepoint</em>, além disso podemos usar o acesso de um
<em>map</em> como função com uso de <code class="language-plaintext highlighter-rouge">&amp;</code>, ou seja, a consulta do valor de uma chave de um <em>map</em> pode ser
tratada como função, no caso através de <code class="language-plaintext highlighter-rouge">&amp;(@dna_to_rna[&amp;1])</code>.</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">RnaTranscription</span> <span class="k">do</span>
  <span class="nv">@doc</span> <span class="sd">"""
  Transcribes a character list representing DNA nucleotides to RNA

  ## Examples

  iex&gt; RnaTranscription.to_rna('ACTG')
  'UGAC'
  """</span>
  <span class="nv">@dna_to_rna</span> <span class="p">%{</span>
    <span class="sx">?G</span> <span class="o">=&gt;</span> <span class="sx">?C</span><span class="p">,</span>
    <span class="sx">?C</span> <span class="o">=&gt;</span> <span class="sx">?G</span><span class="p">,</span>
    <span class="sx">?T</span> <span class="o">=&gt;</span> <span class="sx">?A</span><span class="p">,</span>
    <span class="sx">?A</span> <span class="o">=&gt;</span> <span class="sx">?U</span>
  <span class="p">}</span>

  <span class="nv">@spec</span> <span class="n">to_rna</span><span class="p">([</span><span class="n">char</span><span class="p">])</span> <span class="p">::</span> <span class="p">[</span><span class="n">char</span><span class="p">]</span>
  <span class="k">def</span> <span class="n">to_rna</span><span class="p">(</span><span class="n">dna</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">dna</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="nv">@dna_to_rna</span><span class="p">[</span><span class="nv">&amp;1</span><span class="p">]))</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="nucleotide-count">Nucleotide Count</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/nucleotide-count" target="_blank">aqui</a>.</p>

<p>Além de reaplicar os conceitos de <em>codepoint</em> e <em>map</em> do problema anterior, foi possível verificar
como <code class="language-plaintext highlighter-rouge">Enum.reduce</code> pode trazer uma solução de melhor performance.</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">NucleotideCount</span> <span class="k">do</span>
  <span class="nv">@nucleotides</span> <span class="p">[</span><span class="sx">?A</span><span class="p">,</span> <span class="sx">?C</span><span class="p">,</span> <span class="sx">?G</span><span class="p">,</span> <span class="sx">?T</span><span class="p">]</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Counts individual nucleotides in a DNA strand.

  ## Examples

  iex&gt; NucleotideCount.count('AATAA', ?A)
  4

  iex&gt; NucleotideCount.count('AATAA', ?T)
  1
  """</span>
  <span class="nv">@spec</span> <span class="n">count</span><span class="p">(</span><span class="n">charlist</span><span class="p">(),</span> <span class="n">char</span><span class="p">())</span> <span class="p">::</span> <span class="n">non_neg_integer</span><span class="p">()</span>
  <span class="k">def</span> <span class="n">count</span><span class="p">(</span><span class="n">strand</span><span class="p">,</span> <span class="n">nucleotide</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">strand</span><span class="p">,</span> <span class="k">fn</span> <span class="n">char</span> <span class="o">-&gt;</span> <span class="n">char</span> <span class="o">==</span> <span class="n">nucleotide</span> <span class="k">end</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Returns a summary of counts by nucleotide.

  ## Examples

  iex&gt; NucleotideCount.histogram('AATAA')
  %{?A =&gt; 4, ?T =&gt; 1, ?C =&gt; 0, ?G =&gt; 0}
  """</span>
  <span class="nv">@spec</span> <span class="n">histogram</span><span class="p">(</span><span class="n">charlist</span><span class="p">())</span> <span class="p">::</span> <span class="n">map</span><span class="p">()</span>
  <span class="k">def</span> <span class="n">histogram</span><span class="p">(</span><span class="n">strand</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1">## Solution 1:</span>
    <span class="c1"># Map.new(@nucleotides, fn key -&gt; {key, count(strand, key)} end)</span>

    <span class="c1">## Solution 2:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nv">@nucleotides</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">{</span><span class="nv">&amp;1</span><span class="p">,</span> <span class="mi">0</span><span class="p">})</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span>
      <span class="n">strand</span><span class="p">,</span>
      <span class="n">result</span><span class="p">,</span>
      <span class="k">fn</span> <span class="p">(</span><span class="n">char</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="no">Map</span><span class="o">.</span><span class="n">update!</span><span class="p">(</span><span class="n">acc</span><span class="p">,</span> <span class="n">char</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="nv">&amp;1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
      <span class="k">end</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="accumulate">Accumulate</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/accumulate" target="_blank">aqui</a>.</p>

<p>Gostei bastante deste exercício. Mesmo tendo uma solução aparentemente direta e simples, pude
compreender o ganho que temos com a múltipla definição de funções, já que o Elixir distingue cada
função pelo seu nome + aridade. O uso de recursão torna-se ainda mais empírica, por mais que seja
algo já esperado de uma linguagem funcional. Não posso também deixar de comentar como o uso do
recurso <code class="language-plaintext highlighter-rouge">[ head | tail ]</code> é bonito demais!</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Accumulate</span> <span class="k">do</span>
  <span class="nv">@doc</span> <span class="sd">"""
    Given a list and a function, apply the function to each list item and
    replace it with the function's return value.

    Returns a list.

    ## Examples

      iex&gt; Accumulate.accumulate([], fn(x) -&gt; x * 2 end)
      []

      iex&gt; Accumulate.accumulate([1, 2, 3], fn(x) -&gt; x * 2 end)
      [2, 4, 6]

  """</span>

  <span class="nv">@spec</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="p">(</span><span class="n">any</span> <span class="o">-&gt;</span> <span class="n">any</span><span class="p">))</span> <span class="p">::</span> <span class="n">list</span>
  <span class="k">def</span> <span class="n">accumulate</span><span class="p">([],</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[]</span>
  <span class="k">def</span> <span class="n">accumulate</span><span class="p">([</span><span class="n">h</span> <span class="o">|</span> <span class="n">t</span><span class="p">],</span> <span class="n">fun</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[</span><span class="n">fun</span><span class="o">.</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="o">|</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">fun</span><span class="p">)]</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="secret-handshake">Secret Handshake</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/secret-handshake" target="_blank">aqui</a>.</p>

<p>Foi ótimo para relembrar os conceitos de
<a href="https://pt.wikipedia.org/wiki/L%C3%B3gica_bin%C3%A1ria" target="_blank">Lógica binária</a>. Com a
linha <code class="language-plaintext highlighter-rouge">use Bitwise, only_operators: true</code> temos acesso a todos os operadores de lógica binária, por
mais que este exercício trabalhe apenas como AND, representado por <code class="language-plaintext highlighter-rouge">&amp;&amp;&amp;</code>.</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">SecretHandshake</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Bitwise</span><span class="p">,</span> <span class="ss">only_operators:</span> <span class="no">true</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Determine the actions of a secret handshake based on the binary
  representation of the given `code`.

  If the following bits are set, include the corresponding action in your list
  of commands, in order from lowest to highest.

  1 = wink
  10 = double blink
  100 = close your eyes
  1000 = jump

  10000 = Reverse the order of the operations in the secret handshake
  """</span>
  <span class="nv">@binary_to_handshake</span> <span class="p">%{</span>
    <span class="mi">1</span> <span class="o">=&gt;</span> <span class="s2">"wink"</span><span class="p">,</span>
    <span class="mi">2</span> <span class="o">=&gt;</span> <span class="s2">"double blink"</span><span class="p">,</span>
    <span class="mi">4</span> <span class="o">=&gt;</span> <span class="s2">"close your eyes"</span><span class="p">,</span>
    <span class="mi">8</span> <span class="o">=&gt;</span> <span class="s2">"jump"</span>
  <span class="p">}</span>
  <span class="nv">@spec</span> <span class="n">commands</span><span class="p">(</span><span class="n">code</span> <span class="p">::</span> <span class="n">integer</span><span class="p">)</span> <span class="p">::</span> <span class="n">list</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">())</span>
  <span class="k">def</span> <span class="n">commands</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="nv">@binary_to_handshake</span><span class="p">,</span> <span class="p">[],</span> <span class="k">fn</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">action</span><span class="p">},</span> <span class="n">acc</span> <span class="o">-&gt;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">&amp;&amp;&amp;</span> <span class="n">command</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span> <span class="o">++</span> <span class="p">[</span><span class="n">action</span><span class="p">],</span> <span class="k">else</span><span class="p">:</span> <span class="n">acc</span>
    <span class="k">end</span><span class="p">)</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">&amp;&amp;&amp;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">result</span><span class="p">),</span> <span class="k">else</span><span class="p">:</span> <span class="n">result</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p class="notice--info"><strong>OBS</strong>: Caso ainda o uso de <code class="language-plaintext highlighter-rouge">Enum.reduce/3</code> esteja confuso para você, recomendo muito a leitura
<a href="https://inquisitivedeveloper.com/lwm-elixir-31/#enumreduce3" target="_blank">disso</a> para além do
que explica na <a href="https://hexdocs.pm/elixir/1.12/Enum.html#reduce/3" target="_blank">documentação oficial</a></p>

<h2 id="roman-numerals">Roman Numerals</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/roman-numerals" target="_blank">aqui</a>.</p>

<p>O divertido mesmo foi descobrir que números romanos possuem uma lógica recursiva de tradução da
base decimal. Acabei fazendo duas soluções: uma “manual” e outra recursiva (confesso que vi a
segunda solução bem depois).</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">RomanNumerals</span> <span class="k">do</span>
  <span class="nv">@doc</span> <span class="sd">"""
  Convert the number to a roman number.
  """</span>

  <span class="nv">@base_latters</span> <span class="p">%{</span>
    <span class="mi">1</span> <span class="o">=&gt;</span> <span class="s2">"I"</span><span class="p">,</span>
    <span class="mi">5</span> <span class="o">=&gt;</span> <span class="s2">"V"</span><span class="p">,</span>
    <span class="mi">10</span> <span class="o">=&gt;</span> <span class="s2">"X"</span><span class="p">,</span>
    <span class="mi">50</span> <span class="o">=&gt;</span> <span class="s2">"L"</span><span class="p">,</span>
    <span class="mi">100</span> <span class="o">=&gt;</span> <span class="s2">"C"</span><span class="p">,</span>
    <span class="mi">500</span> <span class="o">=&gt;</span> <span class="s2">"D"</span><span class="p">,</span>
    <span class="mi">1000</span> <span class="o">=&gt;</span> <span class="s2">"M"</span>
  <span class="p">}</span>
  <span class="nv">@spec</span> <span class="n">numeral</span><span class="p">(</span><span class="n">pos_integer</span><span class="p">)</span> <span class="p">::</span> <span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="k">def</span> <span class="n">numeral</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">recursive_opt</span> <span class="p">\\</span> <span class="no">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">if</span> <span class="n">recursive_opt</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span><span class="p">),</span> <span class="k">else</span><span class="p">:</span> <span class="n">manual_solution</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">cond</span> <span class="k">do</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1000</span> <span class="o">-&gt;</span> <span class="s2">"M"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">900</span> <span class="o">-&gt;</span> <span class="s2">"CM"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">900</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">500</span> <span class="o">-&gt;</span> <span class="s2">"D"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">500</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">400</span> <span class="o">-&gt;</span> <span class="s2">"CD"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">400</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">100</span> <span class="o">-&gt;</span> <span class="s2">"C"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">100</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">90</span> <span class="o">-&gt;</span> <span class="s2">"XC"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">90</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">50</span> <span class="o">-&gt;</span> <span class="s2">"L"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">50</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">40</span> <span class="o">-&gt;</span> <span class="s2">"XL"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">40</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="o">-&gt;</span> <span class="s2">"X"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">10</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">9</span> <span class="o">-&gt;</span> <span class="s2">"IX"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">9</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="o">-&gt;</span> <span class="s2">"V"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="o">-&gt;</span> <span class="s2">"IV"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">4</span><span class="p">)</span>
      <span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s2">"I"</span> <span class="o">&lt;&gt;</span> <span class="n">recursive_solution</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
      <span class="no">true</span> <span class="o">-&gt;</span> <span class="s2">""</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">manual_solution</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">list</span> <span class="o">=</span> <span class="no">Integer</span><span class="o">.</span><span class="n">digits</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">list</span><span class="p">)</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">list</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span> <span class="k">fn</span> <span class="p">{</span><span class="n">num</span><span class="p">,</span> <span class="n">idx</span><span class="p">},</span> <span class="n">acc</span> <span class="o">-&gt;</span>
      <span class="n">acc</span> <span class="o">&lt;&gt;</span> <span class="n">composed</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="no">Integer</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span> <span class="o">-</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
    <span class="k">end</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">composed</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">cond</span> <span class="k">do</span>
      <span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">-&gt;</span>
        <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="nv">@base_latters</span><span class="p">[</span><span class="n">base</span><span class="p">],</span> <span class="n">num</span><span class="p">)</span>
      <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="o">-&gt;</span>
        <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="nv">@base_latters</span><span class="p">[</span><span class="n">base</span><span class="p">],</span> <span class="mi">5</span> <span class="o">-</span> <span class="n">num</span><span class="p">)</span> <span class="o">&lt;&gt;</span> <span class="nv">@base_latters</span><span class="p">[</span><span class="mi">5</span> <span class="o">*</span> <span class="n">base</span><span class="p">]</span>
      <span class="n">num</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">-&gt;</span>
        <span class="nv">@base_latters</span><span class="p">[</span><span class="mi">5</span> <span class="o">*</span> <span class="n">base</span><span class="p">]</span>
      <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">9</span> <span class="o">-&gt;</span>
        <span class="nv">@base_latters</span><span class="p">[</span><span class="mi">5</span> <span class="o">*</span> <span class="n">base</span><span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="nv">@base_latters</span><span class="p">[</span><span class="n">base</span><span class="p">],</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
      <span class="no">true</span> <span class="o">-&gt;</span> <span class="c1"># num == 9</span>
         <span class="nv">@base_latters</span><span class="p">[</span><span class="n">base</span><span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nv">@base_latters</span><span class="p">[</span><span class="mi">10</span> <span class="o">*</span> <span class="n">base</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="beer-song">Beer Song</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/beer-song" target="_blank">aqui</a>.</p>

<p>Nada muito sofisticado, apenas te “empurra” a conhecer/utilizar <code class="language-plaintext highlighter-rouge">Enum.map_join</code> e de beber umas com
os amigos (te odeio Covid).</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">BeerSong</span> <span class="k">do</span>
  <span class="nv">@doc</span> <span class="sd">"""
  Get a single verse of the beer song
  """</span>
  <span class="nv">@spec</span> <span class="n">verse</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span> <span class="p">::</span> <span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="k">def</span> <span class="n">verse</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">case</span> <span class="n">number</span> <span class="k">do</span>
      <span class="mi">0</span> <span class="o">-&gt;</span>
        <span class="sd">"""
        No more bottles of beer on the wall, no more bottles of beer.
        Go to the store and buy some more, 99 bottles of beer on the wall.
        """</span>
      <span class="mi">1</span> <span class="o">-&gt;</span>
        <span class="sd">"""
        1 bottle of beer on the wall, 1 bottle of beer.
        Take it down and pass it around, no more bottles of beer on the wall.
        """</span>
      <span class="mi">2</span> <span class="o">-&gt;</span>
        <span class="sd">"""
        2 bottles of beer on the wall, 2 bottles of beer.
        Take one down and pass it around, 1 bottle of beer on the wall.
        """</span>
      <span class="n">_</span> <span class="o">-&gt;</span>
        <span class="sd">"""
        #{number} bottles of beer on the wall, #{number} bottles of beer.
        Take one down and pass it around, #{number - 1} bottles of beer on the wall.
        """</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Get the entire beer song for a given range of numbers of bottles.
  """</span>
  <span class="nv">@spec</span> <span class="n">lyrics</span><span class="p">(</span><span class="no">Range</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()</span>
  <span class="k">def</span> <span class="n">lyrics</span><span class="p">(</span><span class="n">range</span> <span class="p">\\</span> <span class="mi">99</span><span class="o">..</span><span class="mi">0</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Enum</span><span class="o">.</span><span class="n">map_join</span><span class="p">(</span><span class="n">range</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">verse</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="bob">Bob</h2>

<p class="notice--primary">O enunciado pode ser obtido <a href="https://exercism.org/tracks/elixir/exercises/bob" target="_blank">aqui</a>.</p>

<p>Confesso que dei umas coladinhas em outras soluções para fazer este exercício. Sempre tive uma
preguiça monumental de apreender profundamente <em>regex</em>, no final das contas pode ser solucionado com
outras funções do modulo <code class="language-plaintext highlighter-rouge">String</code>.</p>

<p>Solução:</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Bob</span> <span class="k">do</span>

  <span class="c1"># Bob answers 'Sure.' if you ask him a question.</span>

  <span class="c1"># He answers 'Whoa, chill out!' if you yell at him.</span>

  <span class="c1"># He answers 'Calm down, I know what I'm doing!' if you yell a question at him.</span>
  <span class="c1"># He says 'Fine. Be that way!' if you address him without actually saying</span>
  <span class="c1"># anything.</span>

  <span class="c1"># He answers 'Whatever.' to anything else.</span>
  <span class="k">def</span> <span class="n">hey</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">trim</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">trim</span> <span class="n">input</span>
    <span class="k">cond</span> <span class="k">do</span>
      <span class="n">trim</span> <span class="o">==</span> <span class="s2">""</span> <span class="o">-&gt;</span>
        <span class="s2">"Fine. Be that way!"</span>
      <span class="n">trim</span> <span class="o">==</span> <span class="no">String</span><span class="o">.</span><span class="n">upcase</span><span class="p">(</span><span class="n">trim</span><span class="p">)</span> <span class="ow">and</span> <span class="n">trim</span> <span class="o">!=</span> <span class="no">String</span><span class="o">.</span><span class="n">downcase</span><span class="p">(</span><span class="n">trim</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="k">if</span> <span class="no">String</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="n">trim</span><span class="p">,</span> <span class="s2">"?"</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Calm down, I know what I'm doing!"</span><span class="p">,</span> <span class="k">else</span><span class="p">:</span> <span class="s2">"Whoa, chill out!"</span>
      <span class="no">String</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="n">trim</span><span class="p">,</span> <span class="s2">"?"</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="s2">"Sure."</span>
      <span class="no">true</span> <span class="o">-&gt;</span>
        <span class="s2">"Whatever."</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h1 id="meu-aprendizado-com-elixir-e-a-trilha-do-exercismio">Meu aprendizado com Elixir e a trilha do exercism.io</h1>

<p>Fiquei encantado com a plataforma. Os exercícios são muito bem feitos e os instrutores que revisam,
corrigem ou aprovam sua solução, foram todos muito legais. É a polemica pedagogia do “se vira” -
você se vê ali com um problema e precisa correr atrás para desenvolver uma resposta que muitas
vezes não será otimizada e/ou 100% correta.</p>

<p>Tenho outras demandas de estudo, não sei quando vou conseguir voltar a mexer, mas pretendo
continuar essa trilha até o final. Todas as minhas soluções e avanços mantenho no repositório
<a href="https://github.com/callmarx/aprendendo_elixir" target="_blank">https://github.com/callmarx/aprendendo_elixir</a>.</p>

<p>Por agora, é isso.</p>
<div class="tenor-gif-embed" data-postid="10835076" data-share-method="host" data-aspect-ratio="1.22293" data-width="100%"><a href="https://tenor.com/view/cat-ignore-gotta-sleep-now-night-gif-10835076"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Elixir" /><category term="Learn" /><summary type="html"><![CDATA[Sobre os primeiros exercícios de Elixir do exercism.io]]></summary></entry><entry><title type="html">Diário disléxico - Elixir: Aquele clássico apanhadão</title><link href="https://callmarx.github.io/blog/2021/05/23/diario-dislexico-elixir-classico-apanhadao.html" rel="alternate" type="text/html" title="Diário disléxico - Elixir: Aquele clássico apanhadão" /><published>2021-05-23T18:11:49-03:00</published><updated>2021-05-23T18:11:49-03:00</updated><id>https://callmarx.github.io/blog/2021/05/23/diario-dislexico-elixir-classico-apanhadao</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/05/23/diario-dislexico-elixir-classico-apanhadao.html"><![CDATA[<div class="tenor-gif-embed" data-postid="12225126" data-share-method="host" data-width="100%" data-aspect-ratio="1.1340782122905029"><a href="https://tenor.com/view/steve-carrell-dont-like-that-the-office-michael-scott-nope-gif-12225126"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br /></p>

<p>Antes de partir para a resolução de alguns exercícios, achei válido pontuar mais algumas
funcionalidades do Elixir em um “apanhadão”. Neste post abordo sobre estruturas de controle,
funções e operador <em>Pipe</em>, além de rever um pouco mais sobre <em>pattern matching</em>.
<!-- excerpt-separator --></p>

<h1 id="estruturas-de-controle">Estruturas de Controle</h1>

<p class="notice--warning"><strong>Obs</strong>: Me senti bem idiota depois de escrever esta parte. No final das contas ficou bem próximo
ao tutorial oficial, disponível em <a href="https://elixir-lang.org/getting-started/case-cond-and-if.html" target="_blank">https://elixir-lang.org/getting-started/case-cond-and-if.html</a>
e em <a href="https://elixirschool.com/en/lessons/basics/control-structures/" target="_blank">https://elixirschool.com/en/lessons/basics/control-structures/</a>, exceto a
parte do <code class="language-plaintext highlighter-rouge">with</code>, que dei uma atenção maior. Então sinta-se à vontade em pular para o próximo
tópico. Pelo menos me serviu pra fixar o conteúdo, que inclusive é o proposito disso aqui.</p>

<p>Uma breve explicação das estruturas <code class="language-plaintext highlighter-rouge">case</code>, <code class="language-plaintext highlighter-rouge">cond</code>, <code class="language-plaintext highlighter-rouge">if/else/unless</code>, <code class="language-plaintext highlighter-rouge">with</code> e
blocos com <code class="language-plaintext highlighter-rouge">do/end</code>.</p>

<p class="notice--relative--primary"><strong><em>case</em></strong></p>

<p>Trata-se de um <em>switch-case</em>, no qual podemos simplificar múltiplos <em>if/else</em>. Quando uma condição
é satisfatória, seu resultado é devolvido e as demais condições do bloco não são averiguadas.
Repere que quando fazemos <code class="language-plaintext highlighter-rouge">case</code> com uma lista, <strong>não</strong> à percorremos item por item, mas
aplicamos cada condição nela inteira.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="k">do</span>
  <span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Esta condição não será correspondida."</span>
  <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Esta condição será correspondida."</span>
<span class="k">end</span>
<span class="s2">"Esta condição será correspondida."</span>

<span class="k">case</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="k">do</span>
  <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Esta condição não será correspondida."</span>
  <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Esta condição será correspondida e
    atribuirá 'x' à </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">."</span>
<span class="k">end</span>
<span class="s2">"Esta condição será correspondida e</span><span class="se">\n</span><span class="s2">    atribuirá 'x' à 2."</span>
</code></pre></div></div>
<p class="notice--warning"><strong>Obs</strong>: Cuidado com o escopo, no segundo exemplo a variável <code class="language-plaintext highlighter-rouge">x = 2</code> é atribuída e
disponibilizada dentro da condição dela. Se, por exemplo, você fizer <code class="language-plaintext highlighter-rouge">x = 7</code> antes do <code class="language-plaintext highlighter-rouge">case</code>,
depois dele verá que <em>x</em> ainda vale 7, ou seja, não é reescrito.</p>

<p>Você pode usar o operador <code class="language-plaintext highlighter-rouge">^</code> antes de uma variável para fazer a condição sob ela. Para
definir uma condição <em>default</em>, que sempre será válida, basta utilizar <code class="language-plaintext highlighter-rouge">_</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">case</span> <span class="mi">2</span> <span class="k">do</span>
  <span class="o">^</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="s2">"não irá corresponder."</span>
  <span class="n">_</span> <span class="o">-&gt;</span> <span class="s2">"irá corresponder."</span>
<span class="k">end</span>
<span class="s2">"irá corresponder."</span>
</code></pre></div></div>
<p>Note que <code class="language-plaintext highlighter-rouge">_</code> deve ser a última se não o <code class="language-plaintext highlighter-rouge">case</code> sempre cairá nela. Outro
detalhe é que se nenhuma condição for satisfeita é obtido o erro <em>CaseClauseError</em>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="mi">2</span> <span class="k">do</span>
  <span class="n">_</span> <span class="o">-&gt;</span> <span class="s2">"irá corresponder."</span>
  <span class="o">^</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="s2">"Também corresponde, mas não chegará até aqui."</span>
<span class="k">end</span>
<span class="s2">"irá corresponder."</span>

<span class="k">case</span> <span class="ss">:fool</span> <span class="k">do</span>
  <span class="ss">:smart</span> <span class="o">-&gt;</span> <span class="s2">"não irá corresponder."</span>
<span class="k">end</span>
<span class="o">**</span> <span class="p">(</span><span class="no">CaseClauseError</span><span class="p">)</span> <span class="n">no</span> <span class="k">case</span> <span class="n">clause</span> <span class="ss">matching:</span> <span class="ss">:fool</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong><em>cond</em></strong></p>

<p>Parecido com o <code class="language-plaintext highlighter-rouge">case</code>, mas atende a necessidade de checar múltiplos valores ou condições para
além de igualdade.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">cond</span> <span class="k">do</span>
  <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">-&gt;</span>
   <span class="s2">"é falso."</span>
  <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>  <span class="o">==</span> <span class="mi">3</span> <span class="o">-&gt;</span>
   <span class="s2">"também é falso."</span>
  <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">-&gt;</span>
   <span class="s2">"é verdadeiro."</span>
<span class="k">end</span>
<span class="s2">"é verdadeiro."</span>
</code></pre></div></div>

<p>Importante pontuar que tudo para além de <code class="language-plaintext highlighter-rouge">nil</code> e <code class="language-plaintext highlighter-rouge">false</code> é considerado verdadeiro.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span>  <span class="n">hd</span><span class="p">([</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">])</span>
<span class="s2">"a"</span>

<span class="k">cond</span> <span class="k">do</span>
  <span class="n">hd</span><span class="p">([</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">])</span> <span class="o">-&gt;</span>
    <span class="s2">"'a' é considerado como verdadeiro."</span>
<span class="k">end</span>
<span class="s2">"'a' é considerado como verdadeiro."</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong><em>if</em></strong> e <strong><em>unless</em></strong></p>

<p>Nada de novo, são basicamente iguais a maioria das linguagens. Ambos aceitam o bloco <code class="language-plaintext highlighter-rouge">else</code>
e <code class="language-plaintext highlighter-rouge">unless</code> checa o inverso de <code class="language-plaintext highlighter-rouge">if</code>. Lembrando, novamente, que tudo para além de <code class="language-plaintext highlighter-rouge">nil</code>
e <code class="language-plaintext highlighter-rouge">false</code> é considerado verdadeiro.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="k">if</span> <span class="no">true</span> <span class="k">do</span>
<span class="o">...&gt;</span>   <span class="s2">"isto será devolvido!"</span>
<span class="o">...&gt;</span> <span class="k">end</span>
<span class="s2">"isto será devolvido!"</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="k">unless</span> <span class="no">true</span> <span class="k">do</span>
<span class="o">...&gt;</span>   <span class="s2">"isto nunca será devolvido!"</span>
<span class="o">...&gt;</span> <span class="k">end</span>
<span class="no">nil</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="k">if</span> <span class="no">nil</span> <span class="k">do</span>
<span class="o">...&gt;</span>   <span class="s2">"isto não será devolvido."</span>
<span class="o">...&gt;</span> <span class="k">else</span>
<span class="o">...&gt;</span>   <span class="s2">"mas isto será."</span>
<span class="o">...&gt;</span> <span class="k">end</span>
<span class="s2">"mas isto será."</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="k">unless</span> <span class="mi">1</span> <span class="k">do</span>
<span class="o">...&gt;</span>   <span class="s2">"isto não será devolvido, '1' é considerado true."</span>
<span class="o">...&gt;</span> <span class="k">else</span>
<span class="o">...&gt;</span>   <span class="s2">"mas isto será."</span>
<span class="o">...&gt;</span> <span class="k">end</span>
<span class="s2">"mas isto será."</span>
</code></pre></div></div>

<p class="notice--relative--primary">Blocos <strong><em>do</em></strong>/<strong><em>end</em></strong></p>

<p>Provavelmente você já deve ter notado que funções e estruturas de controle são delimitadas por
 <code class="language-plaintext highlighter-rouge">do</code> e <code class="language-plaintext highlighter-rouge">end</code>. Nada de novo também, mas vale pontuar que é possível simplificar esse blocos
em uma linha:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="k">if</span> <span class="no">true</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
<span class="mi">3</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="k">if</span> <span class="no">false</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="ss">:this</span><span class="p">,</span> <span class="k">else</span><span class="p">:</span> <span class="ss">:that</span>
<span class="ss">:that</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong><em>with</em></strong></p>

<p>Introduzido na versão 1.2 do Elixir, a estrutura <code class="language-plaintext highlighter-rouge">with</code> permite simplificar o código,
substituído, por exemplo, clausulas aninhadas de <code class="language-plaintext highlighter-rouge">case</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:first</span><span class="p">),</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:last</span><span class="p">),</span>
  <span class="k">do</span><span class="p">:</span> <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
<span class="s2">"Minha gatatinha idosa, Nila"</span>

<span class="n">only_first</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:first</span><span class="p">),</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:last</span><span class="p">),</span>
  <span class="k">do</span><span class="p">:</span> <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
<span class="ss">:error</span>
</code></pre></div></div>

<p>Primeiro, vamos entender precisamente este exemplo. O que faz a função <code class="language-plaintext highlighter-rouge">fetch/2</code> do módulo
 <code class="language-plaintext highlighter-rouge">Map</code>? Ela “pega” o valor de uma chave de um <em>map</em>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">a:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">c:</span> <span class="mi">5</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="ss">:a</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="mi">1</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="ss">:b</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="ss">:d</span><span class="p">)</span>
<span class="ss">:error</span>
</code></pre></div></div>

<p>Note que seu retorno não é apenas o valor, mas uma <em>tuple</em> com o <em>atom</em> <code class="language-plaintext highlighter-rouge">:ok</code> mais o valor da
chave requisitada. Repare ainda que ao não encontrar devolve <code class="language-plaintext highlighter-rouge">:error</code> <strong>sozinho</strong>.</p>

<p>Para fazer o equivalente com <code class="language-plaintext highlighter-rouge">case</code>, perceba como aumenta a verbosidade do código:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="k">case</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:first</span><span class="p">)</span> <span class="k">do</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="k">case</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
      <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="ss">:error</span> <span class="c1"># retorna o atom :error</span>
    <span class="k">end</span>
  <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="ss">:error</span> <span class="c1"># retorna o atom :error</span>
<span class="k">end</span>
<span class="s2">"Minha gatatinha idosa, Nila"</span>

<span class="n">only_first</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">}</span>

<span class="k">case</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:first</span><span class="p">)</span> <span class="k">do</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="k">case</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
      <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="ss">:error</span> <span class="c1"># retorna o atom :error</span>
    <span class="k">end</span>
  <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="ss">:error</span> <span class="c1"># retorna o atom :error</span>
<span class="k">end</span>
<span class="ss">:error</span>
</code></pre></div></div>
<div class="notice--warning">
 <p><strong>Obs</strong>: Note como a direção das flechas apontam a "direção de partida" da execução e, consequentemente, leitura do código:</p>
  <ul>
    <li>Quando temos <code class="language-plaintext highlighter-rouge">-&gt;</code> em <code class="language-plaintext highlighter-rouge">case</code>, significa que se o conteúdo <strong>à esquerda</strong> da flecha der <em>match</em> com o argumento do <code class="language-plaintext highlighter-rouge">case</code>, executamos então o que segue a direita dela.</li>
    <li>Quando temos <code class="language-plaintext highlighter-rouge">&lt;-</code> em <code class="language-plaintext highlighter-rouge">with</code>, significa que se o conteúdo <strong>à direita</strong> da flecha der <em>match</em> com o da esquerda, executamos então o bloco <code class="language-plaintext highlighter-rouge">do</code>.</li>
    </ul>
</div>

<p>Para esclarecer um pouco mais este poder de síntese com <code class="language-plaintext highlighter-rouge">with</code>, vamos para outro exemplo.
Suponha o seguinte trecho de código encontrado em um projeto Elixir:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="no">Repo</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">changeset</span><span class="p">)</span> <span class="k">do</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="k">case</span> <span class="no">Guardian</span><span class="o">.</span><span class="n">encode_and_sign</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:token</span><span class="p">,</span> <span class="n">claims</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">full_claims</span><span class="p">}</span> <span class="o">-&gt;</span>
        <span class="n">important_stuff</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">full_claims</span><span class="p">)</span>

      <span class="n">error</span> <span class="o">-&gt;</span>
        <span class="n">error</span>
    <span class="k">end</span>

  <span class="n">error</span> <span class="o">-&gt;</span>
    <span class="n">error</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Mesmo não sabendo o comportamento, e muito menos como foi implementado, algumas das chamadas feitas
neste trecho, podemos interpretar que:</p>
<ul>
  <li>No primeiro <code class="language-plaintext highlighter-rouge">case</code>, se <code class="language-plaintext highlighter-rouge">Repo.insert(changeset)</code> retornar um <code class="language-plaintext highlighter-rouge">{:ok, user}</code> entramos
no segundo <code class="language-plaintext highlighter-rouge">case</code>, caso contrário obtemos um erro.</li>
  <li>Já no segundo <code class="language-plaintext highlighter-rouge">case</code>, se <code class="language-plaintext highlighter-rouge">Guardian.encode_and_sign(user, :token, claims)</code> retornar um
 <code class="language-plaintext highlighter-rouge">{:ok, token, full_claims}</code> então a chamada de <code class="language-plaintext highlighter-rouge">important_stuff(token, full_claims)</code> é
 feita, caso contrário obtemos o mesmo erro anterior.</li>
</ul>

<p>Note como podemos simplificar, utilizando menos linhas, mas mantendo a lógica e até aumentando a
legibilidade.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Repo</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">changeset</span><span class="p">),</span>
     <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">full_claims</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Guardian</span><span class="o">.</span><span class="n">encode_and_sign</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:token</span><span class="p">,</span> <span class="n">claims</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">important_stuff</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">full_claims</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong><em>with</em></strong> com <strong>else</strong></p>

<p>A partir da versão 1.3, <code class="language-plaintext highlighter-rouge">with/1</code> também suporta <code class="language-plaintext highlighter-rouge">else</code>. Vejamos primeiro um exemplo com
 <code class="language-plaintext highlighter-rouge">with</code> direto (não aninhado):</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:first</span><span class="p">)</span> <span class="k">do</span>
  <span class="s2">"O primeiro nome é '</span><span class="si">#{</span><span class="n">first</span><span class="si">}</span><span class="s2">'"</span>
<span class="k">else</span>
  <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="s2">"Erro! Não há a chave ':first'"</span>
<span class="k">end</span>
<span class="s2">"O primeiro nome é 'Nila'"</span>

<span class="n">only_last</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_last</span><span class="p">,</span> <span class="ss">:first</span><span class="p">)</span> <span class="k">do</span>
  <span class="s2">"O primeiro nome é '</span><span class="si">#{</span><span class="n">first</span><span class="si">}</span><span class="s2">'"</span>
<span class="k">else</span>
  <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="s2">"Erro! Não há a chave ':first'"</span>
<span class="k">end</span>
<span class="s2">"Erro! Não há a chave ':first'"</span>
</code></pre></div></div>

<p>Agora refazendo o primeiro exemplo, aninhado com dois <em>match</em>s, temos:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:first</span><span class="p">),</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">full_name</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
  <span class="k">else</span>
    <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="s2">"Erro! precisa ter as chaves 'first' e 'last'"</span>
<span class="k">end</span>
<span class="s2">"Minha gatatinha idosa, Nila"</span>

<span class="n">only_first</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Nila"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:first</span><span class="p">),</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_first</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
  <span class="k">else</span>
    <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="s2">"Erro! precisa ter as chaves 'first' e 'last'"</span>
<span class="k">end</span>
<span class="s2">"Erro! precisa ter as chaves 'first' e 'last'"</span>

<span class="n">only_last</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">last:</span> <span class="s2">"Minha gatatinha idosa"</span><span class="p">}</span>

<span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">first</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_last</span><span class="p">,</span> <span class="ss">:first</span><span class="p">),</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">last</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">only_last</span><span class="p">,</span> <span class="ss">:last</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">last</span> <span class="o">&lt;&gt;</span> <span class="s2">", "</span> <span class="o">&lt;&gt;</span> <span class="n">first</span>
  <span class="k">else</span>
    <span class="ss">:error</span> <span class="o">-&gt;</span> <span class="s2">"Erro! precisa ter as chaves 'first' e 'last'"</span>
<span class="k">end</span>
<span class="s2">"Erro! precisa ter as chaves 'first' e 'last'"</span>
</code></pre></div></div>

<p>Como <code class="language-plaintext highlighter-rouge">Map.fetch</code> é chamado em ambos os <em>match</em>s, o bloco de <code class="language-plaintext highlighter-rouge">else</code> precisa lidar apenas
com um único caso de negativa - quando <code class="language-plaintext highlighter-rouge">Map.fetch</code> retorna <code class="language-plaintext highlighter-rouge">:error</code>. Como lidar então com
múltiplos casos de negativa?</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Fool</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="no">Integer</span>

  <span class="k">def</span> <span class="n">check_even_on_map</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">with</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">number</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span>
      <span class="no">true</span> <span class="o">&lt;-</span> <span class="n">is_even</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="k">do</span>
        <span class="s2">"é par"</span>
    <span class="k">else</span>
      <span class="ss">:error</span> <span class="o">-&gt;</span>
        <span class="s2">"Valor não encontrado no map"</span>
      <span class="no">false</span> <span class="o">-&gt;</span>
        <span class="s2">"é impar"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_map</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">a:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">b:</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Fool</span><span class="o">.</span><span class="n">check_even_on_map</span><span class="p">(</span><span class="n">my_map</span><span class="p">,</span> <span class="ss">:a</span><span class="p">)</span>
<span class="s2">"é par"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Fool</span><span class="o">.</span><span class="n">check_even_on_map</span><span class="p">(</span><span class="n">my_map</span><span class="p">,</span> <span class="ss">:b</span><span class="p">)</span>
<span class="s2">"é impar"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Fool</span><span class="o">.</span><span class="n">check_even_on_map</span><span class="p">(</span><span class="n">my_map</span><span class="p">,</span> <span class="ss">:c</span><span class="p">)</span>
<span class="s2">"Valor não encontrado no map"</span>
</code></pre></div></div>

<p>Temos um <code class="language-plaintext highlighter-rouge">with</code> com dois casos distintos de negativa tratados pelo bloco <code class="language-plaintext highlighter-rouge">else</code>:</p>
<ul>
  <li>Com <code class="language-plaintext highlighter-rouge">Map.fetch</code>, que retorna <code class="language-plaintext highlighter-rouge">:error</code></li>
  <li>Com <code class="language-plaintext highlighter-rouge">is_even/1</code>, do módulo <code class="language-plaintext highlighter-rouge">Integer</code> importado, que retorna <code class="language-plaintext highlighter-rouge">false</code>.</li>
</ul>

<h1 id="funções">Funções</h1>

<p>Síntese sobre função anonima, função nomeada e <em>pattern matching</em> em funções.</p>

<p class="notice--relative--primary"><strong>Funções Anonimas</strong></p>

<div class="tenor-gif-embed" data-postid="18985404" data-share-method="host" data-width="100%" data-aspect-ratio="1.3351206434316354"><a href="https://tenor.com/view/imanonymous-anonymous-larry-david-anonymous-curb-anonymous-gif-18985404"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br /></p>

<p>Definidas entre os termos <code class="language-plaintext highlighter-rouge">fn</code> e <code class="language-plaintext highlighter-rouge">end</code>, funções anonimas podem ter qualquer número de
argumentos e múltiplos blocos de execução separados com <code class="language-plaintext highlighter-rouge">-&gt;</code>, sendo à esquerda da flecha os
argumentos de um bloco e a direita o bloco desses argumentos.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="k">end</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="mi">10</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">2</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">multi</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span> <span class="k">end</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">multi</span><span class="o">.</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="mi">6</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">multi</span><span class="o">.</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">-</span><span class="mi">9</span>
</code></pre></div></div>

<p>Existem ainda uma abreviação com uso de <code class="language-plaintext highlighter-rouge">&amp;1</code>, <code class="language-plaintext highlighter-rouge">&amp;2</code>, <code class="language-plaintext highlighter-rouge">&amp;3</code> etc, para os argumentos da
função anonima.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="nv">&amp;1</span> <span class="o">+</span> <span class="nv">&amp;2</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">sum</span><span class="o">.</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="mi">14</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">triple_concat</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="nv">&amp;1</span> <span class="o">&lt;&gt;</span> <span class="nv">&amp;2</span> <span class="o">&lt;&gt;</span> <span class="nv">&amp;3</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">triple_concat</span><span class="o">.</span><span class="p">(</span><span class="s2">"Olá"</span><span class="p">,</span> <span class="s2">", "</span><span class="p">,</span> <span class="s2">"mundo"</span><span class="p">)</span>
<span class="s2">"Olá, mundo"</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong>Pattern Matching</strong> em <strong>Funções Anonimas</strong></p>

<p>Justamente para utilizar múltiplos blocos de execução, ou seja, fazer diferentes execuções,
utilizamos <em>pattern matching</em> sob os argumentos de uma função anonima.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">handle_result</span> <span class="o">=</span> <span class="k">fn</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="s2">"Sucesso! mensagem: </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span>
  <span class="p">{</span><span class="ss">:error</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="s2">"Erro! Consulte o administrador"</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="ss">:uploaded</span><span class="p">})</span>
<span class="s2">"Sucesso! mensagem: uploaded"</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:error</span><span class="p">})</span>
<span class="s2">"Erro! Consulte o administrador"</span>
</code></pre></div></div>

<p>Isso pode ser ainda mais estendido com cláusulas <em>guard</em> através do termo <code class="language-plaintext highlighter-rouge">when</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">handle_result</span> <span class="o">=</span> <span class="k">fn</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="ow">when</span> <span class="n">is_nil</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! Sem resposta do servidor"</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="ow">when</span> <span class="n">is_number</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! código: </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! mensagem: </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span>
  <span class="p">{</span><span class="ss">:error</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Erro! Consulte o administrador"</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">nil</span><span class="p">})</span>
<span class="s2">"Sucesso! Sem resposta do servidor"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="mi">2345</span><span class="p">})</span>
<span class="s2">"Sucesso! código: 2345"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="ss">:logout</span><span class="p">})</span>
<span class="s2">"Sucesso! mensagem: logout"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">handle_result</span><span class="o">.</span><span class="p">({</span><span class="ss">:error</span><span class="p">})</span>
<span class="s2">"Erro! Consulte o administrador"</span>
</code></pre></div></div>

<p>Um cuidado que se dever ter com <em>guard</em>s é que caso tenha um bloco com um conjunto de argumentos
direto, sem <em>guard</em>, os blocos com este mesmo conjunto de argumentos que tenham <em>guards</em> <strong>devem</strong>
vir antes do primeiro. Por exemplo, se no trecho anterior, o bloco
 <code class="language-plaintext highlighter-rouge">{:ok, result} -&gt; "Sucesso! mensagem: #{result}"</code> fosse o primeiro, note que os blocos
 seguintes são ignorados.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bad_handle</span> <span class="o">=</span> <span class="k">fn</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! mensagem: </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="ow">when</span> <span class="n">is_nil</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! Sem resposta do servidor"</span>
  <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="ow">when</span> <span class="n">is_number</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="s2">"Sucesso! código: </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">"</span>
  <span class="p">{</span><span class="ss">:error</span><span class="p">}</span> <span class="o">-&gt;</span>
    <span class="s2">"Erro! Consulte o administrador"</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">bad_handle</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">nil</span><span class="p">})</span>
<span class="s2">"Sucesso! mensagem: "</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">bad_handle</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="mi">2345</span><span class="p">})</span>
<span class="s2">"Sucesso! mensagem: 2345"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">bad_handle</span><span class="o">.</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="ss">:logout</span><span class="p">})</span>
<span class="s2">"Sucesso! mensagem: logout"</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong>Funções Nomeadas</strong></p>

<p>Como já vimos, funções nomeadas são definidas com o termo <code class="language-plaintext highlighter-rouge">def</code> dentro de um módulo. Seu bloco
é delimitado por <code class="language-plaintext highlighter-rouge">do/end</code>, com a possibilidade de abreviação em uma linha com <code class="language-plaintext highlighter-rouge">do:</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="s2">"Hello, "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">same_hello</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Hello, "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s2">"Nila"</span><span class="p">)</span>
<span class="s2">"Hello, Nila"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">same_hello</span><span class="p">(</span><span class="s2">"Nila"</span><span class="p">)</span>
<span class="s2">"Hello, Nila"</span>
</code></pre></div></div>

<p>Lembrando também, que as funções são distinguidas pelo Elixir por seu nome + aridade (quantidade de
argumentos).</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter2</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Olá desconhecido"</span>           <span class="c1"># hello/0</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Olá, "</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>          <span class="c1"># hello/1</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Olá, </span><span class="si">#{</span><span class="n">n1</span><span class="si">}</span><span class="s2"> e </span><span class="si">#{</span><span class="n">n2</span><span class="si">}</span><span class="s2">"</span>   <span class="c1"># hello/2</span>
<span class="k">end</span>
</code></pre></div></div>

<p class="notice--relative--primary"><strong>Pattern Matching</strong> em <strong>Funções Nomeadas</strong></p>

<p>Dado último post,
<a href="/blog/2021/05/14/diario-dislexico-elixir-pattern-matching.html" target="_blank">Preciso falar sobre “Pattern Matching”</a>,
vamos complicar um pouco somando <em>pattern matching</em> e recursão.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Length</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">0</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">([</span><span class="n">_</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">of</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[]</span>
<span class="mi">0</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="mi">3</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="mi">4</span>
</code></pre></div></div>

<p>O laço de recursão de <code class="language-plaintext highlighter-rouge">of</code> gira em torno do <em>pattern matching</em>. Temos que se o argumento:</p>
<ul>
  <li>for <code class="language-plaintext highlighter-rouge">[]</code>, encerra o laço e devolve o valor 0.</li>
  <li>tiver uma calda, soma-se 1 com <code class="language-plaintext highlighter-rouge">of</code> da calda do argumento (segue o laço)</li>
</ul>

<p>Por isso <code class="language-plaintext highlighter-rouge">Length.of/1</code> devolve o tamanho da lista.
Note ainda que o <em>pattern matching</em> não esta apenas na primeira parte, em que <code class="language-plaintext highlighter-rouge">[]</code> é checado,
mas como também esta na segunda parte, em que <code class="language-plaintext highlighter-rouge">tail</code> é associado a calda do parâmetro. É
possível fazer a mesma recursão, substituído o segundo <em>match</em> pelo método <code class="language-plaintext highlighter-rouge">tl/1</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Length</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">0</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">(</span><span class="n">list</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">of</span><span class="p">(</span><span class="n">tl</span><span class="p">(</span><span class="n">list</span><span class="p">))</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Da mesma forma como vimos anteriormente com funções anonimas, também podemos usar <em>guard</em>s.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Length</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">0</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">([</span><span class="n">_</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]),</span> <span class="k">do</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">of</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
  <span class="k">def</span> <span class="n">of</span><span class="p">(</span><span class="n">not_a_list</span><span class="p">)</span> <span class="ow">when</span> <span class="ow">not</span> <span class="n">is_list</span><span class="p">(</span><span class="n">not_a_list</span><span class="p">)</span> <span class="k">do</span>
    <span class="s2">"Erro! O argumento precisa ser uma lista"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="s2">"ops!"</span>
<span class="s2">"Erro! O argumento precisa ser uma lista"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Length</span><span class="o">.</span><span class="n">of</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="mi">3</span>
</code></pre></div></div>

<p>Importante relembrar que o <em>pattern matching</em> é feito para <strong>ambos</strong> os lados de <code class="language-plaintext highlighter-rouge">=</code>, dentro da
definição do argumento</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(%{</span><span class="ss">name:</span> <span class="n">person_name</span><span class="p">}</span> <span class="o">=</span> <span class="n">person</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Olá, </span><span class="si">#{</span><span class="n">person_name</span><span class="si">}</span><span class="s2">"</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">person</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">hello</span><span class="p">(%{</span><span class="ss">first:</span> <span class="n">first_name</span><span class="p">}</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">last:</span> <span class="n">last_name</span><span class="p">}</span> <span class="o">=</span> <span class="n">person</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Olá, </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">"</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">person</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_cat</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">hello</span> <span class="n">my_cat</span>
<span class="n">Ol</span><span class="err">á</span><span class="p">,</span> <span class="no">Nila</span>
<span class="p">%{</span><span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">,</span> <span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_self</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">first:</span> <span class="s2">"Eugenio Augusto"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Jimenes"</span><span class="p">,</span> <span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">hello</span> <span class="n">my_self</span>
<span class="n">Ol</span><span class="err">á</span><span class="p">,</span> <span class="no">Eugenio</span> <span class="no">Augusto</span> <span class="no">Jimenes</span>
<span class="p">%{</span><span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">,</span> <span class="ss">first:</span> <span class="s2">"Eugenio Augusto"</span><span class="p">,</span> <span class="ss">last:</span> <span class="s2">"Jimenes"</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="operador-pipe">Operador <em>Pipe</em></h1>

<p>Representado por <code class="language-plaintext highlighter-rouge">|&gt;</code>, ele passa o resultado da expressão à sua esquerda para “o que vier” à
sua direita.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"Minha gata é velhinha"</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
<span class="p">[</span><span class="s2">"Minha"</span><span class="p">,</span> <span class="s2">"gata"</span><span class="p">,</span> <span class="s2">"é"</span><span class="p">,</span> <span class="s2">"velhinha"</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"Minha gata é velhinha"</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">upcase</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
<span class="p">[</span><span class="s2">"MINHA"</span><span class="p">,</span> <span class="s2">"GATA"</span><span class="p">,</span> <span class="s2">"É"</span><span class="p">,</span> <span class="s2">"VELHINHA"</span><span class="p">]</span>
</code></pre></div></div>

<p>Quando lidamos com funções que possuem mais de um argumento o resultado que vem do <em>pipe</em> (à
esquerda) entrará sempre como o primeiro parâmetro (à direita). Por exemplo, a própria função
 <code class="language-plaintext highlighter-rouge">String.split</code> possui um segundo argumento opcional.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"Minha_gata_é_velhinha"</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"_"</span><span class="p">)</span>
<span class="p">[</span><span class="s2">"Minha"</span><span class="p">,</span> <span class="s2">"gata"</span><span class="p">,</span> <span class="s2">"é"</span><span class="p">,</span> <span class="s2">"velhinha"</span><span class="p">]</span>
</code></pre></div></div>

<p>Note que <strong>sempre</strong> entrará como primeiro parâmetro.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"_"</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"Minha_gata_é_velhinha"</span><span class="p">)</span>
<span class="p">[</span><span class="s2">"_"</span><span class="p">]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"_"</span><span class="p">,</span> <span class="s2">"Minha_gata_é_velhinha"</span><span class="p">)</span>
<span class="p">[</span><span class="s2">"_"</span><span class="p">]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"Minha_gata_é_velhinha"</span><span class="p">,</span> <span class="s2">"_"</span><span class="p">)</span>
<span class="p">[</span><span class="s2">"Minha"</span><span class="p">,</span> <span class="s2">"gata"</span><span class="p">,</span> <span class="s2">"é"</span><span class="p">,</span> <span class="s2">"velhinha"</span><span class="p">]</span>
</code></pre></div></div>

<p>Esse operador é extremamente presente nos códigos em Elixir. Com ele é possível escrever lógicas
consecutivas, logo sucintas e de fácil leitura.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">names</span>
    <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">", "</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="n">hello</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">phrase</span><span class="p">()</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">phrase</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Olá, "</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">hello</span> <span class="s2">"Eugenio"</span>
<span class="s2">"Olá, Eugenio"</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter</span><span class="o">.</span><span class="n">hello</span> <span class="p">[</span><span class="s2">"Eugenio"</span><span class="p">,</span> <span class="s2">"Lucas"</span><span class="p">,</span> <span class="s2">"Tomaz"</span><span class="p">]</span>
<span class="s2">"Olá, Eugenio, Lucas, Tomaz"</span>
</code></pre></div></div>

<p>Por agora, é isso.</p>

<div class="tenor-gif-embed" data-postid="18638117" data-share-method="host" data-width="100%" data-aspect-ratio="1.546583850931677"><a href="https://tenor.com/view/done-so-done-im-done-monkey-throw-gif-18638117"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Elixir" /><category term="Learn" /><summary type="html"><![CDATA[Uma "rápida" síntese de mais alguns conceitos antes de ir para resolução de exercícios.]]></summary></entry><entry><title type="html">Diário disléxico - Elixir: preciso falar sobre “Pattern Matching”</title><link href="https://callmarx.github.io/blog/2021/05/14/diario-dislexico-elixir-pattern-matching.html" rel="alternate" type="text/html" title="Diário disléxico - Elixir: preciso falar sobre “Pattern Matching”" /><published>2021-05-14T19:27:21-03:00</published><updated>2021-05-14T19:27:21-03:00</updated><id>https://callmarx.github.io/blog/2021/05/14/diario-dislexico-elixir-pattern-matching</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/05/14/diario-dislexico-elixir-pattern-matching.html"><![CDATA[<div class="tenor-gif-embed" data-postid="18212100" data-share-method="host" data-width="100%" data-aspect-ratio="1.4067796610169492"><a href="https://tenor.com/view/spider-man-we-one-gif-18212100"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br /></p>

<p>Quanto mais eu pesquiso sobre Elixir em tutoriais, artigos, livros e vídeos pela internet, mais eu
vejo isso sendo enfatizado. Inicialmente acreditei que fosse apenas por conta de legibilidade do
código, mas provou-se bem mais do que isto, justificando a vasta cobertura que diversos autores dão.
<!-- excerpt-separator --></p>

<h1 id="pattern-matching">“Pattern Matching”</h1>
<p>Essa parte provavelmente vai parecer confusa e desnecessária, mas confie, <em>pattern matching</em> é uma
característica poderosa do Elixir. Inicialmente precisamos entender que <code class="language-plaintext highlighter-rouge">=</code> é um operador
<em>match</em>, em uma tradução livre de <em>match</em> seria “correspondência”. Sim, também o utilizamos para
atribuição, mas a aplicação vai mais além.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">=</span> <span class="n">x</span>
<span class="mi">3</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">4</span> <span class="o">=</span> <span class="n">x</span>
<span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="mi">3</span>
</code></pre></div></div>
<p class="notice--info"><strong>Curiosidade</strong>: Caso queira remover a numeração das linhas e habilitar histórico de comandos para
o seu <code class="language-plaintext highlighter-rouge">iex</code>, consulte este tutorial
<a href="https://www.toptechskills.com/elixir-phoenix-tutorials-courses/how-to-change-prompt-in-iex-elixir-tutorial-examples/" target="_blank">https://www.toptechskills.com/elixir-phoenix-tutorials-courses/how-to-change-prompt-in-iex-elixir-tutorial-examples/</a>.</p>

<p>A atribuição <code class="language-plaintext highlighter-rouge">x = 3</code> ocorre como a maioria das linguagens, mas o que aconteceu com <code class="language-plaintext highlighter-rouge">3 = x</code>?
Retornou <code class="language-plaintext highlighter-rouge">3</code> e não um erro como o caso seguinte, ou seja, foi uma expressão válida. Quando essa
expressão não faz sentido, devolve um erro, melhor dizendo, quando a operação <em>match</em> não é feita
sob dois valores iguais temos um <em>MatchError</em>.</p>

<p>Note que a atribuição é <strong>sempre</strong> feita da esquerda para direita, <code class="language-plaintext highlighter-rouge">4 = x</code> não define a
variável x como 4. Porém, podemos fazer a operação <em>match</em> da esquerda para direita com o uso de
<code class="language-plaintext highlighter-rouge">^</code>, operador <em>pin</em>, antes da variável para não reatribui-la.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">=</span> <span class="n">x</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="o">^</span><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
<span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="mi">3</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="o">^</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
<span class="mi">2</span>
</code></pre></div></div>

<p>O mesmo padrão se repete com <em>lists</em> e <em>tuples</em>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span>
<span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">^</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">y</span><span class="p">,</span> <span class="o">^</span><span class="n">x</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">y</span>
<span class="mi">1</span>
</code></pre></div></div>

<p>Inclusive, a atribuição pode ser feita sob toda uma <em>list</em> ou <em>tuple</em>, quando correta.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">a</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">b</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">c</span>
<span class="mi">3</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">var</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">var</span>
<span class="mi">3</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">var</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:nonok</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="p">{</span><span class="ss">:nonok</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div>
<p>Conseguimos fazer também o <em>pattern matching</em> com a “cabeça” e “calda” de uma lista. Isso é feito
com auxílio do operador <code class="language-plaintext highlighter-rouge">|</code> e o comportamento é similar aos das funções <code class="language-plaintext highlighter-rouge">hd/1</code> e <code class="language-plaintext highlighter-rouge">tl/1</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">head</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">head</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">tail</span>
<span class="p">[]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">head</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="p">[]</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">tl</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
<span class="p">[]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">hd</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">tl</span><span class="p">([])</span>
<span class="o">**</span> <span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
    <span class="ss">:erlang</span><span class="o">.</span><span class="n">tl</span><span class="p">([])</span>
</code></pre></div></div>

<p>Note que a expressão <code class="language-plaintext highlighter-rouge">[head | tail] = []</code> retorna um erro pois uma lista vazia, <code class="language-plaintext highlighter-rouge">[]</code>, não
possui “calda”. Da mesma forma, obtemos erro ao chamar a função <code class="language-plaintext highlighter-rouge">tl/1</code> sob o mesmo valor.</p>

<h1 id="funções-e-o-pattern-matching">Funções e o “pattern matching”</h1>
<p>Por traz dos panos, as funções fazem <em>pattern match</em> nos seus argumentos.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter1</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(%{</span><span class="ss">name:</span> <span class="n">person_name</span><span class="p">})</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello, "</span> <span class="o">&lt;&gt;</span> <span class="n">person_name</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_cat</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter1</span><span class="o">.</span><span class="n">hello</span> <span class="n">my_cat</span>
<span class="no">Hello</span><span class="p">,</span> <span class="no">Nila</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">no_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">age:</span> <span class="s2">"35"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"coding"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter1</span><span class="o">.</span><span class="n">hello</span> <span class="n">no_name</span>
<span class="o">**</span> <span class="p">(</span><span class="no">FunctionClauseError</span><span class="p">)</span> <span class="n">no</span> <span class="n">function</span> <span class="n">clause</span> <span class="n">matching</span> <span class="ow">in</span> <span class="no">Greeter1</span><span class="o">.</span><span class="n">hello</span><span class="o">/</span><span class="mi">1</span>

    <span class="no">The</span> <span class="n">following</span> <span class="n">arguments</span> <span class="n">were</span> <span class="n">given</span> <span class="n">to</span> <span class="no">Greeter1</span><span class="o">.</span><span class="n">hello</span><span class="o">/</span><span class="mi">1</span><span class="p">:</span>

        <span class="c1"># 1</span>
        <span class="p">%{</span><span class="ss">age:</span> <span class="s2">"35"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"coding"</span><span class="p">}</span>

    <span class="ss">iex:</span><span class="mi">2</span><span class="p">:</span> <span class="no">Greeter1</span><span class="o">.</span><span class="n">hello</span><span class="o">/</span><span class="mi">1</span>
</code></pre></div></div>
<p class="notice--info"><strong>Curiosidade</strong>: O operador <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> é usado para concatenar strings.</p>

<p>Quando invocamos a função com <code class="language-plaintext highlighter-rouge">my_cat = %{name: "Nila", age: "16", favorite_hobby: "sleep"}</code>
ela “olha” para a chave <code class="language-plaintext highlighter-rouge">name:</code> do <em>map</em> e ignora o resto. Como <code class="language-plaintext highlighter-rouge">no_name = %{age: "35", favorite_hobby: "coding"}</code>
não têm essa chave obtemos o erro “<em>no function clause matching</em>”.</p>

<p>Podemos também fazer <em>matching</em>s dentro da própria definição de argumento. No exemplo abaixo,
utiliza-se não apenas do valor da chave <code class="language-plaintext highlighter-rouge">name:</code> mas também o <em>map</em> inteiro passado, <em>printando</em>
com <code class="language-plaintext highlighter-rouge">IO.inspect</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter2</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(%{</span><span class="ss">name:</span> <span class="n">person_name</span><span class="p">}</span> <span class="o">=</span> <span class="n">person</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello, "</span> <span class="o">&lt;&gt;</span> <span class="n">person_name</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">person</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">my_cat</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">,</span> <span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter2</span><span class="o">.</span><span class="n">hello</span> <span class="n">my_cat</span>
<span class="no">Hello</span><span class="p">,</span> <span class="no">Nila</span>
<span class="p">%{</span><span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">,</span> <span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">}</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="n">just_my_name</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Eugenio"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter2</span><span class="o">.</span><span class="n">hello</span> <span class="n">just_my_name</span>
<span class="no">Hello</span><span class="p">,</span> <span class="no">Eugenio</span>
<span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Eugenio"</span><span class="p">}</span>
</code></pre></div></div>

<p>Mesmo a função <code class="language-plaintext highlighter-rouge">Greeter2.hello/1</code> tendo apenas um argumento, são disponibilizados para dentro
dela dois parâmetros, ou seja, duas variáveis. No exemplo com a entrada utilizada com sucesso,
temos:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">person_name</code>, que recebe <code class="language-plaintext highlighter-rouge">"Nila"</code></li>
  <li><code class="language-plaintext highlighter-rouge">person</code>, que recebe todo <em>map</em>, <code class="language-plaintext highlighter-rouge">%{name: "Nila", age: "16", favorite_hobby: "sleep"}</code></li>
</ul>

<p>Importante ressaltar que, o <em>pattern matching</em> é feito para <strong>ambos</strong> os lados de <code class="language-plaintext highlighter-rouge">=</code>, dentro da
definição do argumento, sob o valor de entrada da função. Isso fica provado quando invertemos a
ordem de <code class="language-plaintext highlighter-rouge">%{name: person_name} = person</code> para <code class="language-plaintext highlighter-rouge">person = %{name: person_name}</code>, note que
continuamos a obter o <strong>mesmo</strong> resultado.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter3</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">person</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">name:</span> <span class="n">person_name</span><span class="p">})</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">"Hello, "</span> <span class="o">&lt;&gt;</span> <span class="n">person_name</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">person</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter3</span><span class="o">.</span><span class="n">hello</span> <span class="n">my_cat</span>
<span class="no">Hello</span><span class="p">,</span> <span class="no">Nila</span>
<span class="p">%{</span><span class="ss">age:</span> <span class="s2">"16"</span><span class="p">,</span> <span class="ss">favorite_hobby:</span> <span class="s2">"sleep"</span><span class="p">,</span> <span class="ss">name:</span> <span class="s2">"Nila"</span><span class="p">}</span>
</code></pre></div></div>

<p>Resumindo, as funções fazem <em>pattern match</em> com os dados de entrada sob os seus argumentos de
maneira independente. Podemos usar isso para atribuir valores à variáveis separadas para dentro da
função.</p>

<h1 id="não-confunda-com-argumentos-padrões">Não confunda com argumentos padrões</h1>
<p>Tome cuidado é com a similaridade da escrita. No Ruby utilizamos <code class="language-plaintext highlighter-rouge">=</code> no argumento para definir
um valor padrão, tornado sua entrada opcional. Já no Elixir, como vimos, <code class="language-plaintext highlighter-rouge">=</code> vai além da
associação, para definir um argumento com um valor padrão, como no Ruby, utiliza-se <code class="language-plaintext highlighter-rouge">\\</code>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Greeter4</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">language_code</span> <span class="p">\\</span> <span class="s2">"en"</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">phrase</span><span class="p">(</span><span class="n">language_code</span><span class="p">)</span> <span class="o">&lt;&gt;</span> <span class="n">name</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">phrase</span><span class="p">(</span><span class="s2">"en"</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Hello, "</span>
  <span class="k">defp</span> <span class="n">phrase</span><span class="p">(</span><span class="s2">"pt"</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Olá, "</span>
<span class="k">end</span>

<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter4</span><span class="o">.</span><span class="n">hello</span> <span class="s2">"Eugenio"</span>
<span class="s2">"Hello, Eugenio"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter4</span><span class="o">.</span><span class="n">hello</span> <span class="s2">"Eugenio"</span><span class="p">,</span> <span class="s2">"en"</span>
<span class="s2">"Hello, Eugenio"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Greeter4</span><span class="o">.</span><span class="n">hello</span> <span class="s2">"Eugenio"</span><span class="p">,</span> <span class="s2">"pt"</span>
<span class="s2">"Olá, Eugenio"</span>
</code></pre></div></div>
<p class="notice--warning"><strong>Obs</strong>: No exemplo, <code class="language-plaintext highlighter-rouge">defp phrase</code> é uma função privada e seu comportamento é o padrão: só pode
ser invocada internamente do seu escopo, ou seja, dentro de <code class="language-plaintext highlighter-rouge">defmodule</code>.</p>

<p>Por agora, é isso.</p>

<div class="tenor-gif-embed" data-postid="8793778" data-share-method="host" data-width="100%" data-aspect-ratio="1.33"><a href="https://tenor.com/view/thumbsup-gif-8793778"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Elixir" /><category term="Learn" /><summary type="html"><![CDATA[Essa parte provavelmente vai parecer confusa e desnecessária, mas confie, "pattern matching" é uma característica poderosa do Elixir.]]></summary></entry><entry><title type="html">Diário disléxico - Elixir: Um pouco mais que um “Hello World”</title><link href="https://callmarx.github.io/blog/2021/05/06/diario-dislexico-elixir-mais-que-hello-world.html" rel="alternate" type="text/html" title="Diário disléxico - Elixir: Um pouco mais que um “Hello World”" /><published>2021-05-06T22:26:09-03:00</published><updated>2021-05-06T22:26:09-03:00</updated><id>https://callmarx.github.io/blog/2021/05/06/diario-dislexico-elixir-mais-que-hello-world</id><content type="html" xml:base="https://callmarx.github.io/blog/2021/05/06/diario-dislexico-elixir-mais-que-hello-world.html"><![CDATA[<div class="tenor-gif-embed" data-postid="13830351" data-share-method="host" data-width="100%" data-aspect-ratio="2.4057971014492754"><a href="https://tenor.com/view/hello-sexy-hi-hello-mr-bean-gif-13830351"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br /></p>

<p>Para além de instalar e codar o clássico “Hello World”, vamos explorar os passos iniciais com a
tecnologia. Entender os <em>data types</em>, as operações básicas e algumas curiosidades.
<!-- excerpt-separator --></p>

<h1 id="um-pouco-de-história">Um pouco de história</h1>
<p>Elixir é uma linguagem de programação dinâmica, funcional e concorrente, compilada e executada na
máquina virtual Erlang (BEAM - <em>Bogdan/Björn’s Erlang Abstract Machine</em>). Criada em 2012 pelo
brasileiro <a href="https://github.com/josevalim" target="_blank">José Valim</a> em um projeto de pesquisa e
desenvolvimento da empresa <a href="http://blog.plataformatec.com.br" target="_blank">Plataformatec</a>,
hoje uma subsidiária do Nubank.</p>

<p><br />
<img src="/assets/posts/erlang-logo.webp" alt="Erlang logo" class="align-left" />
Mas e esse tal de <a href="https://en.wikipedia.org/wiki/Erlang_(programming_language)" target="_blank">Erlang</a>?
Trata-se de uma linguagem também funcional e concorrente criada pela empresa Ericson em 1986.
Projetada para lidar com as demandas de telecomunicações, ou seja, alta capacidade de resposta,
escalabilidade e disponibilidade constante. Afinal uma ligação não podia (e ainda não pode) ser
afetada pelas outras, um imprevisto ou atualização não pode derrubar o sistema telefônico. Com o
avanço da internet e a sofisticação das aplicações como redes sociais, jogos multiplayer, sistemas
de gerenciamento de conteúdo (CMS - <em>Content Management Systems</em>), compartilhamento e execução
online de arquivos multimídia, entre outros exemplos, a necessidade de alta-performance e o chamado
<em>non-stop system</em> deixou de ser exclusividade para as telecoms. Por isso o Elixir foi desenvolvido
<a href="https://vimeo.com/53221562" target="_blank">sob a tecnologia</a> da Ericson</p>

<p>Isto pode ser visto não apenas com a popularidade do Elixir, mas como do próprio Erlang, utilizado
por exemplo no desenvolvimento do WhatsApp, por grandes empresas como MasterCard, Nintendo, Amazon e
<a href="https://www.erlang-solutions.com/blog/which-companies-are-using-erlang-and-why-mytopdogstatus" target="_blank">entre outros</a>.
No lado do Elixir, mesmo sendo uma tecnologia mais recente, temos casos de sucesso com as empresas
Pinterest, Financial Times, Discord (sim, aquele mesmo que você pra conversar com os amiguinhos em
jogos online), PepsiCo, Toyota Connected <a href="https://www.monterail.com/blog/famous-companies-using-elixir" target="_blank">etc</a>.</p>

<h1 id="instalação-e-configuração">Instalação e configuração</h1>
<p>Inicialmente pensei em utilizar algum gerenciador de versão como faço com Ruby através do RVM, mas
optei, por agora, em instalar diretamente no meu Linux, no caso Arch Linux. Para outros sistemas
operacionais veja em <a href="https://elixir-lang.org/install.html" target="_blank">https://elixir-lang.org/install.html</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># instalação</span>
<span class="nv">$ </span><span class="nb">sudo </span>pacman <span class="nt">-S</span> elixir
</code></pre></div></div>

<p>Você deve obter algo como:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ elixir -v
Erlang/OTP 23 [erts-11.2] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe]

Elixir 1.11.3 (compiled with Erlang/OTP 23)
</code></pre></div></div>

<p>Além do comando <code class="language-plaintext highlighter-rouge">elixir</code> temos o <code class="language-plaintext highlighter-rouge">iex</code>, que é o <em>Elixir’s interactive shell</em>, e o <code class="language-plaintext highlighter-rouge">mix</code>,
que é o <em>build tool</em> da linguagem. Aparentemente equivalentes ao <code class="language-plaintext highlighter-rouge">irb</code> e <code class="language-plaintext highlighter-rouge">bundle</code> do Ruby.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">iex</span>
<span class="no">Erlang</span><span class="o">/</span><span class="no">OTP</span> <span class="mi">23</span> <span class="p">[</span><span class="n">erts</span><span class="o">-</span><span class="mf">11.2</span><span class="p">]</span> <span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="p">[</span><span class="mi">64</span><span class="o">-</span><span class="n">bit</span><span class="p">]</span> <span class="p">[</span><span class="ss">smp:</span><span class="mi">12</span><span class="p">:</span><span class="mi">12</span><span class="p">]</span> <span class="p">[</span><span class="ss">ds:</span><span class="mi">12</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span> <span class="p">[</span><span class="n">async</span><span class="o">-</span><span class="ss">threads:</span><span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="n">hipe</span><span class="p">]</span>

<span class="no">Interactive</span> <span class="no">Elixir</span> <span class="p">(</span><span class="mf">1.11</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="n">press</span> <span class="no">Ctrl</span><span class="o">+</span><span class="no">C</span> <span class="n">to</span> <span class="k">exit</span> <span class="p">(</span><span class="n">type</span> <span class="n">h</span><span class="p">()</span> <span class="no">ENTER</span> <span class="n">for</span> <span class="n">help</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
<span class="mi">2</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">3</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">8</span> <span class="o">==</span> <span class="mf">8.0</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">8</span> <span class="o">===</span> <span class="mf">8.0</span>
<span class="no">false</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">true</span> <span class="o">==</span> <span class="ss">:true</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"Duas palavras"</span><span class="p">,</span> <span class="s2">" "</span><span class="p">)</span>
<span class="p">[</span><span class="s2">"Duas"</span><span class="p">,</span> <span class="s2">"palavras"</span><span class="p">]</span>
</code></pre></div></div>
<p class="notice--warning"><strong>Obs</strong>: Mais a diante explico melhor, e com mais exemplos, as interações do console acima. Caso
esteja perdido <del>como eu fiquei</del> para sair do <code class="language-plaintext highlighter-rouge">iex</code>, basta dar CTRL+C duas vezes.</p>

<p>Existem diversas funcionalidades contempladas pelo <code class="language-plaintext highlighter-rouge">mix</code> como podemos ver em
<a href="https://hexdocs.pm/mix/Mix.html" target="_blank">https://hexdocs.pm/mix/Mix.html</a>. Para esta primeira parte utilizei para criar
um projeto.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mix new hello
* creating README.md
* creating .formatter.exs
* creating .gitignore
* creating mix.exs
* creating lib
* creating lib/hello.ex
* creating test
* creating test/test_helper.exs
* creating test/hello_test.exs

Your Mix project was created successfully.
You can use "mix" to compile it, test it, and more:

    cd hello
    mix test

Run "mix help" for more commands.
</code></pre></div></div>

<p>Este comando gera uma estrutura de pastas e arquivos para abranger testes, dependências, ambiente e
versão.</p>

<p class="notice--info"><strong>Curiosidade</strong>: Arquivos de extensão <code class="language-plaintext highlighter-rouge">.ex</code> são compilados pelo Elixir para arquivos <code class="language-plaintext highlighter-rouge">.beam</code>,
que é o <em>bytecode</em> interpretado pela máquina virtual do Erlang, enquanto os de
extensão <code class="language-plaintext highlighter-rouge">.exs</code> rodam como <em>script</em>, ou seja, compilados e disponibilizados em memória RAM.</p>

<h1 id="um-pouco-sobre-tipos-de-dados-e-operações-básicas">Um pouco sobre tipos de dados e operações básicas</h1>

<p>Através do <code class="language-plaintext highlighter-rouge">iex</code> podemos brincar com algumas operações matemáticas, nada muito diferente das
outras linguagens.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">7</span> <span class="o">+</span> <span class="mi">2</span>
<span class="mi">9</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">3</span>
<span class="mi">24</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mi">12</span><span class="o">/</span><span class="mi">3</span>
<span class="mf">4.0</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">div</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">11</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">div</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">4</span>
<span class="mi">8</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">rem</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span>
<span class="mi">0</span>
</code></pre></div></div>
<p class="notice--info"><strong>Curiosidade</strong>: Podemos notar que a divisão com <code class="language-plaintext highlighter-rouge">/</code> retorna um <em>float</em>, mesmo sendo inteira.
Alguns funções gerais já são disponibilizadas globalmente e, da mesma forma que o Ruby, os
parenteses de uma chamada de função não é obrigatório.</p>

<p>Os tipos básicos de dados são: <em>integers</em>, <em>floats</em>, <em>strings</em>, <em>booleans</em>, <em>atoms</em>, <em>lists</em>,
<em>tuples</em> e <em>maps</em>. Suporta também notações de atalho para inserir números binários, octais e
hexadecimais, além de notação científica para <em>floats</em>. <em>Atoms</em> talvez seja “o novo” aqui, trata-se
de uma constante cujo valor é o próprio nome, parecido com o <em>symbol</em> do Ruby e outras linguagens.
<em>Booleans</em> também são considerados como <em>atoms</em>.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="mi">6</span>                          <span class="c1"># integer</span>
<span class="mi">6</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mh">0x1F</span>                       <span class="c1"># integer</span>
<span class="mi">31</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mf">1.8</span>                        <span class="c1"># float</span>
<span class="mf">1.8</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="mf">1.0e-10</span>                    <span class="c1"># floats are 64-bit double precision</span>
<span class="mf">1.0e-10</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"Hello World"</span>              <span class="c1"># string</span>
<span class="s2">"Hello World"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">true</span>                       <span class="c1"># boolean</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">false</span>                      <span class="c1"># boolean</span>
<span class="no">false</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:atom</span>                      <span class="c1"># atom / symbol</span>
<span class="ss">:atom</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:true</span>                      <span class="c1"># atom / symbol</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">false</span> <span class="o">==</span> <span class="ss">:false</span>            <span class="c1"># boolean is a atom</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">is_atom</span><span class="p">(</span><span class="no">true</span><span class="p">)</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">is_boolean</span><span class="p">(</span><span class="ss">:true</span><span class="p">)</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>                  <span class="c1"># list</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>                  <span class="c1"># tuple</span>
<span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="ss">:b</span><span class="p">}</span>  <span class="c1"># map</span>
<span class="p">%{</span><span class="mi">2</span> <span class="o">=&gt;</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">map</span><span class="p">[</span><span class="ss">:a</span><span class="p">]</span>
<span class="mi">1</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">map</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="ss">:b</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">map</span><span class="p">[</span><span class="ss">:c</span><span class="p">]</span>
<span class="no">nil</span>
</code></pre></div></div>

<p><em>Strings</em> são definidas por aspas duplas, sequências de escape como quebra de linha, o <code class="language-plaintext highlighter-rouge">\n</code>,
também são aceitas e o mesmo açúcar sintático para interpolação do Ruby é utilizado. Algo que me
chamou a atenção é que para o Elixir, internamente, <code class="language-plaintext highlighter-rouge">strings</code> são binários.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="o">&gt;</span> <span class="n">string</span> <span class="o">=</span> <span class="ss">:world</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"hello </span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">"</span>
<span class="s2">"hello world"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"hello
...&gt; world"</span>
<span class="s2">"hello</span><span class="se">\n</span><span class="s2">world"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="s2">"hello</span><span class="se">\n</span><span class="s2">world"</span>
<span class="s2">"hello</span><span class="se">\n</span><span class="s2">world"</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">"hello</span><span class="se">\n</span><span class="s2">world"</span><span class="p">)</span>
<span class="n">hello</span>
<span class="n">world</span>
<span class="ss">:ok</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">is_binary</span><span class="p">(</span><span class="s2">"I'm a binary guy"</span><span class="p">)</span>
<span class="no">true</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">byte_size</span><span class="p">(</span><span class="s2">"I'm a binary guy"</span><span class="p">)</span>
<span class="mi">16</span>
</code></pre></div></div>
<p class="notice--info"><strong>Curiosidade</strong>: Através de <code class="language-plaintext highlighter-rouge">IO.puts</code> podemos ver a saída de uma <em>string</em> com a quebra literal
de linha. O módulo <code class="language-plaintext highlighter-rouge">IO</code> traz diversas funções de entrada e saída - <em>Input &amp; Output</em>, irei
abordar mais sobre isso nos próximos posts.</p>

<p>Sobre <em>lists</em>, <em>tuples</em> e <em>maps</em> eu pretendo explicar mais a fundo nas próximas partes. Tratam-se
de estruturas de dados com diversas operações e peculiaridades. Os dados em Elixir (e na maioria
das linguagens funcionais) são imutáveis, ou seja, uma vez declarados não podem ser alterados. Uma
concatenação de duas <em>lists</em>, por exemplo, não as altera, mas cria uma nova em memória. Por isso
que não vemos aqui o conceito direto de <em>array</em>, quer seria uma especie de lista com valores
acessíveis (indexáveis) e mutáveis, logo não imutáveis.</p>

<h1 id="e-vamos-pro-hello-world">E vamos pro “Hello World”</h1>
<div class="tenor-gif-embed" data-postid="5220607" data-share-method="host" data-width="100%" data-aspect-ratio="1.3333333333333333"><a href="https://tenor.com/view/thumbsup-cool-great-nice-notbad-gif-5220607"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>

<p><br />
Acessando nosso projeto, criado com <code class="language-plaintext highlighter-rouge">mix new hello</code>, temos a seguinte base no arquivo <code class="language-plaintext highlighter-rouge">hello/lib/hello.ex</code>:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Hello</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="sd">"""
  Documentation for `Hello`.
  """</span>

  <span class="nv">@doc</span> <span class="sd">"""
  Hello world.

  ## Examples

      iex&gt; Hello.hello()
      :world

  """</span>
  <span class="k">def</span> <span class="n">hello</span> <span class="k">do</span>
    <span class="ss">:world</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As tags <em>@moduledoc</em> e <em>@doc</em> são para documentar módulos e funções, respectivamente. São ignoradas
na compilação do mesmo modo que os comentários (feito com <code class="language-plaintext highlighter-rouge">#</code> no começo da linha). A diferença é
que o conteúdo dessas tags, delimitado por 3 aspas duplas, são renderizados pela <em>help</em> do <code class="language-plaintext highlighter-rouge">iex</code>
quando invocada para o módulo e/ou função. Também serve para gerar a documentação geral do projeto
em HTML e EPUB através da dependência <a href="https://github.com/elixir-lang/ex_doc" target="_blank">ExDoc</a>.</p>

<p>O curioso aqui é que ao criamos um projeto, o comando <code class="language-plaintext highlighter-rouge">mix</code>, por padrão, já cria uma função de
“Hello World”. Para executar basta utilizar o <code class="language-plaintext highlighter-rouge">iex</code> com a opção <code class="language-plaintext highlighter-rouge">-S mix</code> dentro da pasta do
projeto para compila-lo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Execute dentro da pasta do projeto</span>
<span class="nv">$ </span>iex <span class="nt">-S</span> mix
Erlang/OTP 23 <span class="o">[</span>erts-11.2.1] <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>64-bit] <span class="o">[</span>smp:12:12] <span class="o">[</span>ds:12:12:10] <span class="o">[</span>async-threads:1] <span class="o">[</span>hipe]

Compiling 1 file <span class="o">(</span>.ex<span class="o">)</span>
Generated hello app
Interactive Elixir <span class="o">(</span>1.11.3<span class="o">)</span> - press Ctrl+C to <span class="nb">exit</span> <span class="o">(</span><span class="nb">type </span>h<span class="o">()</span> ENTER <span class="k">for </span><span class="nb">help</span><span class="o">)</span>
iex&gt; Hello.hello<span class="o">()</span>
:world
</code></pre></div></div>

<p>A chamada de <code class="language-plaintext highlighter-rouge">Hello.hello()</code> retorna o <em>atom</em> <code class="language-plaintext highlighter-rouge">:world</code>. Da mesma forma que o Ruby, o Elixir
omite o <em>“return”</em> de uma função, considera o último valor apresentado como o retorno.</p>

<p>Como isso veio fácil demais, vamos incrementar um pouco:</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Hello</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Hello </span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">(</span><span class="n">name1</span><span class="p">,</span> <span class="n">name2</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Hello </span><span class="si">#{</span><span class="n">name1</span><span class="si">}</span><span class="s2"> and </span><span class="si">#{</span><span class="n">name2</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">def</span> <span class="n">hello</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"Hello World"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Bem, já temos algumas coisas interessantes aqui. Primeiro vemos que é possível omitir o <code class="language-plaintext highlighter-rouge">end</code>
de uma função, simplificando-a em uma linha. Segundo, é mais maluco pra mim quando eu vi, é que
podemos ter múltiplas funções com mesmo nome e quantidades diferentes de argumentos.
Isto porque o Elixir refere as funções por nome + aridade (quantidade de argumentos).</p>

<p class="notice--warning"><strong>Obs</strong>: É possível ainda ter mais de uma função com o mesmo nome e aridade, diferenciando-as pela
condição feita com os argumentos em cada uma. Isso faz com que tenha bem menos <em>if/else</em> em seus
códigos Elixir.</p>

<p>Para executar as alterações basta rodar o <code class="language-plaintext highlighter-rouge">recompile</code> no terminal <code class="language-plaintext highlighter-rouge">iex</code> aberto anteriormente</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; recompile
Compiling 1 file <span class="o">(</span>.ex<span class="o">)</span>
:ok
iex&gt; Hello.hello
<span class="s2">"Hello World"</span>
iex&gt; Hello.hello<span class="o">(</span><span class="s2">"Eugenio"</span><span class="o">)</span>
<span class="s2">"Hello Eugenio"</span>
iex&gt; Hello.hello <span class="s2">"Eugenio"</span>, <span class="s2">"Nila"</span>
<span class="s2">"Hello Eugenio and Nila"</span>
</code></pre></div></div>

<p>Por agora, é isso.</p>

<div class="tenor-gif-embed" data-postid="8843762" data-share-method="host" data-width="100%" data-aspect-ratio="1.25"><a href="https://tenor.com/view/noice-nice-click-gif-8843762"></a></div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>]]></content><author><name>Eugenio Augusto Jimenes</name></author><category term="blog" /><category term="Elixir" /><category term="Learn" /><summary type="html"><![CDATA[Começando pelo básico: curiosidades, instalação, configuração e o clássico "Hello World".]]></summary></entry></feed>